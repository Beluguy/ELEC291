                 -1   $MODLP51RC2
0000              1   ;--------------------------------------------------------
0000              2   ; Register and bit definitions for the AT89LP51RC2/RB2
0000              3   ;--------------------------------------------------------
0000              4   ; Special Function Registers
0000              5   ;--------------------------------------------------------
0000              6   ACC            DATA 0xe0
0000              7   B              DATA 0xf0
0000              8   PSW            DATA 0xd0
0000              9   SP             DATA 0x81
0000             10   SPX            DATA 0xef
0000             11   DPL            DATA 0x82
0000             12   DPH            DATA 0x83
0000             13   DPLB           DATA 0xd4
0000             14   DPHB           DATA 0xd5
0000             15   PAGE           DATA 0xf6
0000             16   AX             DATA 0xe1
0000             17   BX             DATA 0xf7
0000             18   DSPR           DATA 0xe2
0000             19   FIRD           DATA 0xe3
0000             20   MACL           DATA 0xe4
0000             21   MACH           DATA 0xe5
0000             22   PCON           DATA 0x87
0000             23   AUXR           DATA 0x8e
0000             24   AUXR1          DATA 0xa2
0000             25   DPCF           DATA 0xa1
0000             26   CKRL           DATA 0x97
0000             27   CKCKON0        DATA 0x8f
0000             28   CKCKON1        DATA 0xaf
0000             29   CKSEL          DATA 0x85
0000             30   CLKREG         DATA 0xae
0000             31   OSCCON         DATA 0x86
0000             32   IE             DATA 0xa8
0000             33   IEN0           DATA 0xa8
0000             34   IEN1           DATA 0xb1
0000             35   IPH0           DATA 0xb7
0000             36   IP             DATA 0xb8
0000             37   IPL0           DATA 0xb8
0000             38   IPH1           DATA 0xb3
0000             39   IPL1           DATA 0xb2
0000             40   P0             DATA 0x80
0000             41   P1             DATA 0x90
0000             42   P2             DATA 0xa0
0000             43   P3             DATA 0xb0
0000             44   P4             DATA 0xc0
0000             45   P0M0           DATA 0xe6
0000             46   P0M1           DATA 0xe7
0000             47   P1M0           DATA 0xd6
0000             48   P1M1           DATA 0xd7
0000             49   P2M0           DATA 0xce
0000             50   P2M1           DATA 0xcf
0000             51   P3M0           DATA 0xc6
0000             52   P3M1           DATA 0xc7
0000             53   P4M0           DATA 0xbe
0000             54   P4M1           DATA 0xbf
0000             55   SCON           DATA 0x98
0000             56   SBUF           DATA 0x99
0000             57   SADEN          DATA 0xb9
0000             58   SADDR          DATA 0xa9
0000             59   BDRCON         DATA 0x9b
0000             60   BRL            DATA 0x9a
0000             61   TCON           DATA 0x88
0000             62   TMOD           DATA 0x89
0000             63   TCONB          DATA 0x91
0000             64   TL0            DATA 0x8a
0000             65   TH0            DATA 0x8c
0000             66   TL1            DATA 0x8b
0000             67   TH1            DATA 0x8d
0000             68   RL0            DATA 0xf2
0000             69   RL1            DATA 0xf3
0000             70   RH0            DATA 0xf4
0000             71   RH1            DATA 0xf5
0000             72   WDTRST         DATA 0xa6
0000             73   WDTPRG         DATA 0xa7
0000             74   T2CON          DATA 0xc8
0000             75   T2MOD          DATA 0xc9
0000             76   RCAP2H         DATA 0xcb
0000             77   RCAP2L         DATA 0xca
0000             78   TH2            DATA 0xcd
0000             79   TL2            DATA 0xcc
0000             80   SPCON          DATA 0xc3
0000             81   SPSTA          DATA 0xc4
0000             82   SPDAT          DATA 0xc5
0000             83   SSCON          DATA 0x93
0000             84   SSCS           DATA 0x94
0000             85   SSDAT          DATA 0x95
0000             86   SSADR          DATA 0x96
0000             87   KBLS           DATA 0x9c
0000             88   KBE            DATA 0x9d
0000             89   KBF            DATA 0x9e
0000             90   KBMOD          DATA 0x9f
0000             91   BMSEL          DATA 0x92
0000             92   FCON           DATA 0xd1
0000             93   EECON          DATA 0xd2
0000             94   ACSRA          DATA 0xa3
0000             95   ACSRB          DATA 0xab
0000             96   AREF           DATA 0xbd
0000             97   DADC           DATA 0xa4
0000             98   DADI           DATA 0xa5
0000             99   DADL           DATA 0xac
0000            100   DADH           DATA 0xad
0000            101   CCON           DATA 0xd8
0000            102   CMOD           DATA 0xd9
0000            103   CL             DATA 0xe9
0000            104   CH             DATA 0xf9
0000            105   CCAPM0         DATA 0xda
0000            106   CCAPM1         DATA 0xdb
0000            107   CCAPM2         DATA 0xdc
0000            108   CCAPM3         DATA 0xdd
0000            109   CCAPM4         DATA 0xde
0000            110   CCAP0H         DATA 0xfa
0000            111   CCAP1H         DATA 0xfb
0000            112   CCAP2H         DATA 0xfc
0000            113   CCAP3H         DATA 0xfd
0000            114   CCAP4H         DATA 0xfe
0000            115   CCAP0L         DATA 0xea
0000            116   CCAP1L         DATA 0xeb
0000            117   CCAP2L         DATA 0xec
0000            118   CCAP3L         DATA 0xed
0000            119   CCAP4L         DATA 0xee
0000            120   ;--------------------------------------------------------
0000            121   ; special function bits
0000            122   ;--------------------------------------------------------
0000            123   P              BIT 0xd0
0000            124   F1             BIT 0xd1
0000            125   OV             BIT 0xd2
0000            126   RS0            BIT 0xd3
0000            127   RS1            BIT 0xd4
0000            128   F0             BIT 0xd5
0000            129   AC             BIT 0xd6
0000            130   CY             BIT 0xd7
0000            131   EX0            BIT 0xa8
0000            132   ET0            BIT 0xa9
0000            133   EX1            BIT 0xaa
0000            134   ET1            BIT 0xab
0000            135   ES             BIT 0xac
0000            136   ET2            BIT 0xad
0000            137   EC             BIT 0xae
0000            138   EA             BIT 0xaf
0000            139   PX0            BIT 0xb8
0000            140   PT0            BIT 0xb9
0000            141   PX1            BIT 0xba
0000            142   PT1            BIT 0xbb
0000            143   PS             BIT 0xbc
0000            144   PT2            BIT 0xbd
0000            145   IP0D           BIT 0xbf
0000            146   PPCL           BIT 0xbe
0000            147   PT2L           BIT 0xbd
0000            148   PLS            BIT 0xbc
0000            149   PT1L           BIT 0xbb
0000            150   PX1L           BIT 0xba
0000            151   PT0L           BIT 0xb9
0000            152   PX0L           BIT 0xb8
0000            153   RXD            BIT 0xb0
0000            154   TXD            BIT 0xb1
0000            155   INT0           BIT 0xb2
0000            156   INT1           BIT 0xb3
0000            157   T0             BIT 0xb4
0000            158   T1             BIT 0xb5
0000            159   WR             BIT 0xb6
0000            160   RD             BIT 0xb7
0000            161   RI             BIT 0x98
0000            162   TI             BIT 0x99
0000            163   RB8            BIT 0x9a
0000            164   TB8            BIT 0x9b
0000            165   REN            BIT 0x9c
0000            166   SM2            BIT 0x9d
0000            167   SM1            BIT 0x9e
0000            168   SM0            BIT 0x9f
0000            169   IT0            BIT 0x88
0000            170   IE0            BIT 0x89
0000            171   IT1            BIT 0x8a
0000            172   IE1            BIT 0x8b
0000            173   TR0            BIT 0x8c
0000            174   TF0            BIT 0x8d
0000            175   TR1            BIT 0x8e
0000            176   TF1            BIT 0x8f
0000            177   CP_RL2         BIT 0xc8
0000            178   C_T2           BIT 0xc9
0000            179   TR2            BIT 0xca
0000            180   EXEN2          BIT 0xcb
0000            181   TCLK           BIT 0xcc
0000            182   RCLK           BIT 0xcd
0000            183   EXF2           BIT 0xce
0000            184   TF2            BIT 0xcf
0000            185   CF             BIT 0xdf
0000            186   CR             BIT 0xde
0000            187   CCF4           BIT 0xdc
0000            188   CCF3           BIT 0xdb
0000            189   CCF2           BIT 0xda
0000            190   CCF1           BIT 0xd9
0000            191   CCF0           BIT 0xd8
0000              2   org 0000H
0000 02047C       3      ljmp MainProgram
0003              4   
0003              5   ; Timer/Counter 0 overflow interrupt vector
000B              6   org 0x000B
000B 0203EE       7            ljmp Timer0_ISR
000E              8   
000E              9   ; Timer/Counter 2 overflow interrupt vector
002B             10   org 0x002B
002B 020414      11            ljmp Timer2_ISR
002E             12   
002E             13   CLK                              EQU 22118400
002E             14   BAUD                             EQU 115200
002E             15   BRG_VAL                          EQU (0x100-(CLK/(16*BAUD)))
002E             16   TIMER0_RATE              EQU 1000    ; 1000Hz PWM output signal 
002E             17   TIMER0_RELOAD            EQU ((65536-(CLK/TIMER0_RATE)))
002E             18   TIMER1_RATE              EQU 22050   ; 22050Hz is the sampling rate of the wav file we are playing
002E             19   TIMER1_RELOAD            EQU 0x10000-(SYSCLK/TIMER1_RATE)
002E             20   TIMER2_RATE              EQU 1000    ; 1000Hz, for a timer tick of 1ms
002E             21   TIMER2_RELOAD            EQU ((65536-(CLK/TIMER2_RATE)))
002E             22   
002E             23   HOLD_PWM                         EQU 20          ; 20% pwm for holding the temp constant 
002E             24   PWM_HOLD_RATE            EQU (TIMER0_RATE-(HOLD_PWM*10))
002E             25   
002E             26   ;----------------------------------Ports!----------------------------------------
002E             27   SPEAKER                  EQU P2.4                ; Used with a MOSFET to turn off speaker when not in use
002E             28   OUTPUT                   EQU P0.2                ; output signal to the relay box
002E             29   
002E             30   ; These 'equ' must match the hardware wiring
002E             31   ; They are used by 'LCD_4bit.inc'
002E             32   LCD_RS                   EQU P3.2
002E             33   ; LCD_RW equ Px.x ; Always grounded
002E             34   LCD_E                    EQU P3.3
002E             35   LCD_D4                   EQU P3.4
002E             36   LCD_D5                   EQU P3.5
002E             37   LCD_D6                   EQU P3.6
002E             38   LCD_D7                   EQU P3.7
002E             39   ; These ’EQU’ must match the wiring between the microcontroller and ADC 
002E             40   CE_ADC                   EQU P2.0 
002E             41   MY_MOSI_ADC          EQU P2.1 
002E             42   MY_MISO_ADC      EQU P2.2 
002E             43   MY_SCLK_ADC      EQU P2.3 
002E             44   
002E             45   ; The pins used for SPI for flash memory 
002E             46   FLASH_CE                 EQU  P0.7               ; Pin 1
002E             47   MY_MOSI                  EQU  P2.5               ; Pin 5
002E             48   MY_MISO                  EQU  P2.7               ; Pin 2
002E             49   MY_SCLK                  EQU  P0.4               ; Pin 6
002E             50   
002E             51   DECR            EQU P0.0                 ; button to increment current selection
002E             52   INCR            EQU P0.3                 ; button to increment current selection
002E             53   EDIT                     EQU P0.6                ; button for changing what to edit
002E             54   START_STOP               EQU P4.4                ; button to start/stop reflow
002E             55   RST                              EQU     P2.6            ; button to reset
002E             56   ; i have buttons on 2.6, 4.4, 0.6, 0.3, 0.0 (left to right)
002E             57   ;--------------------------------------------------------------------------------
002E             58   
002E             59   ; These register definitions needed by 'math32.inc'
0030             60   DSEG at 30H
0030             61   x:                               ds 4
0034             62   y:                               ds 4
0038             63   bcd:                             ds 5
003D             64   Result:                          ds 2
003F             65   
003F             66   ;--------------------for clock----------------------
003F             67   Count1ms:                ds 2 ; Used to determine when one second has passed
0041             68   secs_ctr:                ds 1
0042             69   mins_ctr:                ds 1
0043             70   pwm_time:                        ds 1 ; Used to check whether it is time to turn on the pwm output
0044             71   ;---------------------------------------------------
0044             72   
0044             73   ;--------------------for settings-------------------
0044             74   edit_sett:               ds 1 ; which segment are we editing 
0045             75   ; 0 - soak temp
0045             76   ; 1 - soak time
0045             77   ; 2 - reflow temp
0045             78   ; 3 - reflow time
0045             79   ; 4 - cool temp
0045             80   
0045             81   ;---------------------------------------------------
0045             82   
0045             83   ;--------------------for FSM------------------------
0045             84   state:                           ds 1                            
0046             85   soak_temp:                       ds 1
0047             86   soak_time:                       ds 1
0048             87   reflow_temp:             ds 1
0049             88   reflow_time:             ds 1
004A             89   pwm:                             ds 1
004B             90   sec:                             ds 1
004C             91   cool_temp:                       ds 1
004D             92   temp:                            ds 1
004E             93   ;---------------------------------------------------
004E             94   
0000             95   BSEG
0000             96   mf:                              dbit 1 ; flag for math32
0001             97   start_flag:              dbit 1
0002             98   one_second_flag:         dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0003             99   safety_overheat:    dbit 1 ; for overheat safety feature
0004            100   
002E            101   CSEG
                546   $LIST
                105   	$LIST
0360            107   
0360            108   ;------------------UI-UX vars---------------------
0360            109   ;            1234567890123456
0360 736F616B   110   setup1:  db 'soak            ', 0
     20202020
     20202020
     20202020
     00
0371 746D703A   111   setup2:  db 'tmp:XXX time:XXX', 0
     58585820
     74696D65
     3A585858
     00
0382 7265666C   112   setup3:  db 'refl            ', 0
     20202020
     20202020
     20202020
     00
0393 636F6F6C   113   setup4:  db 'cool *          ', 0
     202A2020
     20202020
     20202020
     00
03A4 746D703A   114   setup5:  db 'tmp:XXX         ', 0
     58585820
     20202020
     20202020
     00
03B5            115   
03B5 74656D70   116   run1:    db 'temp:XXX state X', 0
     3A585858
     20737461
     74652058
     00
03C6 656C6170   117   run2:    db 'elapsed XX:XX   ', 0
     73656420
     58583A58
     58202020
     00
03D7            118   
03D7            119   Timer0_Init:
03D7 E589       120            mov a, TMOD
03D9 54F0       121            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
03DB 4401       122            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
03DD F589       123            mov TMOD, a
03DF 758CA9     124            mov TH0, #high(TIMER0_RELOAD)
03E2 758A9A     125            mov TL0, #low(TIMER0_RELOAD)
03E5            126            ; Set autoreload value
03E5 75F4A9     127            mov RH0, #high(TIMER0_RELOAD)
03E8 75F29A     128            mov RL0, #low(TIMER0_RELOAD)
03EB            129            ; Enable the timer and interrupts
03EB D2A9       130       setb ET0  ; Enable timer 0 interrupt
03ED            131       ; setb TR0  ; Start timer 0
03ED 22         132            ret
03EE            133   
03EE            134   ;---------------------------------;
03EE            135   ; ISR for timer 0.  Set to execute;
03EE            136   ; every 1/4096Hz to generate a    ;
03EE            137   ; 2048 Hz square wave at pin P1.1 ;
03EE            138   ;---------------------------------;
03EE            139   Timer0_ISR:
03EE            140            ;clr TF0  ; According to the data sheet this is done for us already.
03EE 758CA9     141            mov TH0, #high(TIMER0_RELOAD)
03F1 758A9A     142            mov TL0, #low(TIMER0_RELOAD)
03F4            143            ; Set autoreload value
03F4 75F4A9     144            mov RH0, #high(TIMER0_RELOAD)
03F7 75F29A     145            mov RL0, #low(TIMER0_RELOAD)
03FA 32         146            reti
03FB            147   
03FB            148   ;---------------------------------;
03FB            149   ; Routine to initialize the ISR   ;
03FB            150   ; for timer 2                     ;
03FB            151   ;---------------------------------;
03FB            152   Timer2_Init:
03FB 75C800     153            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
03FE 75CDA9     154            mov TH2, #high(TIMER2_RELOAD)
0401 75CC9A     155            mov TL2, #low(TIMER2_RELOAD)
0404            156            ; Set the reload value
0404 75CBA9     157            mov RCAP2H, #high(TIMER2_RELOAD)
0407 75CA9A     158            mov RCAP2L, #low(TIMER2_RELOAD)
040A            159            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
040A E4         160            clr a
040B F53F       161            mov Count1ms+0, a
040D F540       162            mov Count1ms+1, a
040F            163            ; Enable the timer and interrupts
040F D2AD       164       setb ET2  ; Enable timer 2 interrupt
0411 D2CA       165       setb TR2  ; Enable timer 2
0413 22         166            ret
0414            167   
0414            168   ;---------------------------------;
0414            169   ; ISR for timer 2                 ;
0414            170   ;---------------------------------;
0414            171   Timer2_ISR:
0414 C2CF       172            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0416 B290       173            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0418            174            
0418            175            ; The two registers used in the ISR must be saved in the stack
0418 C0E0       176            push acc
041A C0D0       177            push psw
041C            178            
041C            179            ; Increment the 16-bit one mili second counter
041C 053F       180            inc Count1ms+0    ; Increment the low 8-bits first
041E E53F       181            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0420 7002       182            jnz Inc_Done
0422 0540       183            inc Count1ms+1
0424            184   
0424            185   Inc_Done:
0424            186            ; Check if second has passed
0424 E53F       187            mov a, Count1ms+0
0426 B4E831     188            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0429 E540       189            mov a, Count1ms+1
042B B4032C     190            cjne a, #high(1000), Timer2_ISR_done
042E            191            
042E            192            ; 1000 milliseconds have passed.  Set a flag so the main program knows
042E D202       193            setb one_second_flag ; Let the main program know second had passed
0430            194                    
0430            195            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0430 E4         196            clr a
0431 F53F       197            mov Count1ms+0, a
0433 F540       198            mov Count1ms+1, a
0435            199            
0435            200            ; reset secs_ctr if hits 60, increment 1 to minutes
0435            201            ; Increment the seconds counter
0435 E541       202            mov a, secs_ctr
0437 B45910     203            cjne a, #0x59, Timer2_ISR_increment_s
043A E4         204            clr a
043B D4         205            da a ; Decimal adjust instruction.  Check datasheet for more details!
043C F541       206            mov secs_ctr, a
043E            207            
043E            208            ; increment the minutes counter
043E E542       209            mov a, mins_ctr
0440 B4590F     210            cjne a, #0x59, Timer2_ISR_increment_m
0443 E4         211            clr a
0444 D4         212            da a
0445 F542       213            mov mins_ctr, a
0447            214   
0447 02045A     215            ljmp Timer2_ISR_done
044A            216            
044A            217   Timer2_ISR_increment_s:
044A 2401       218            add a, #0x01
044C D4         219            da a ; Decimal adjust instruction.  Check datasheet for more details!
044D F541       220            mov secs_ctr, a
044F 02045A     221            ljmp Timer2_ISR_done
0452            222   Timer2_ISR_increment_m:
0452 2401       223            add a, #0x01
0454 D4         224            da a ; Decimal adjust instruction.  Check datasheet for more details!
0455 F542       225            mov mins_ctr, a
0457 02045A     226            ljmp Timer2_ISR_done
045A            227   Timer2_ISR_done:
045A D0D0       228            pop psw
045C D0E0       229            pop acc
045E 32         230            reti
045F            231   
045F            232   ; Configure the serial port and baud rate
045F            233   InitSerialPort:
045F            234       ; Since the reset button bounces, we need to wait a bit before
045F            235       ; sending messages, otherwise we risk displaying gibberish!
045F 79DE       236            mov R1, #222
0461 78A6       237       mov R0, #166
0463 D8FE       238       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0465 D9FA       239       djnz R1, $-4 ; 22.51519us*222=4.998ms
0467            240       ; Now we can proceed with the configuration
0467 438780     241            orl     PCON,#0x80
046A 759852     242            mov     SCON,#0x52
046D 759B00     243            mov     BDRCON,#0x00
0470 759AF4     244            mov     BRL,#BRG_VAL
0473 759B1E     245            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
0476 22         246       ret
0477            247       
0477            248   INIT_SPI: 
0477 D2A2       249            setb MY_MISO_ADC ; Make MISO an input pin
0479 C2A3       250            clr MY_SCLK_ADC ; For mode (0,0) SCLK is zero
047B 22         251            ret
047C            252   
047C            253   ; -------------------------------------------------- MAIN PROGRAM LOOP ----------------------------------------------
047C            254   
047C            255   MainProgram: ; setup()
047C 75817F     256       mov SP, #7FH                                                 ; Set the stack pointer to the begining of idata
047F            257       
047F C282       258            clr OUTPUT                                                      ; pwm is set to low by default
0481 120A42     259            lcall Load_Configuration ; initialize settings
0484 12045F     260       lcall InitSerialPort
0487 120477     261       lcall INIT_SPI
048A 12030E     262       lcall LCD_4BIT
048D            263   
048D            264       ;initialize flags
048D 750100     265       mov start_flag, #0
0490 750300     266       mov safety_overheat, #0
0493            267   
0493            268       ;initialize fsm
0493 754500     269       mov state, #0
0496            270   
0496            271       ;init clock
0496 754100     272       mov secs_ctr, #0
0499 754200     273       mov mins_ctr, #0
049C            274       
049C 1203D7     275       lcall Timer0_Init
049F D2AF       276       setb EA                                                      ; Enable Global interrupts
04A1            277   
04A1            278   forever: ;loop() please only place function calls into the loop!
04A1 30020E     279       jnb one_second_flag, skipDisplay     ; this segment only executes once a second
04A4 C202       280       clr one_second_flag
04A6 12058C     281       lcall generateDisplay
04A9 1204D9     282       lcall readADC                                                ; reads ch0 and saves result to Result as 2 byte binary
04AC            283            ;lcall Delay ; hardcoded 1s delay can change or use the Timer // COMMENTED SINCE WE ARE USING TIMER NOW
04AC 1204F4     284       lcall Do_Something_With_Result ; convert to bcd and send to serial
04AF 1204C4     285       lcall checkOverheat
04B2            286       skipDisplay:                                                 ; end segment
04B2            287   
04B2 200103     288       jb start_flag, skipPoll
04B5 120848     289       lcall pollButtons                                    ; poll buttons for editing screen
04B8            290       skipPoll: 
04B8            291   
04B8 12092C     292       lcall reset                                                  ; check if reset is pressed
04BB 02098A     293       ljmp FSM                                                     ; finite state machine logic
04BE 120A07     294            lcall save_config                                       ; save config to nvmem
04C1 0204A1     295            ljmp forever
04C4            296   
04C4            297   ; ---------------------------------------------------------------------------------------------------
04C4            298   
04C4            299   ;----------------------------------safety-features---------------------------------------------------
04C4            300   checkOverheat:
04C4 E54D       301       mov a, temp
04C6 C3         302            clr c
04C7 94FB       303            subb a, #251                            ; if 251 > temp, c = 1
04C9 4006       304            jc notOverheat                          ; return if notOverheating
04CB 200306     305       jb safety_overheat, overheatReset ; check if flag is set, if set that means has been overheating for prolonged time
04CE D203       306            setb safety_overheat        ; set overheat flag for next time
04D0 22         307       ret
04D1            308   notOverheat:
04D1 C203       309       clr safety_overheat
04D3 22         310            ret
04D4            311   overheatReset:
04D4 C203       312       clr safety_overheat
04D6 7405       313       mov a, #5                                            ; reset to state 5 when reset for safety
04D8 22         314       ret
04D9            315   ;----------------------------------------------------------------------------------------------------
04D9            316   readADC:
04D9 C2A0       317       clr CE_ADC
04DB 7801       318            mov R0, #00000001B ; Start bit:1
04DD 12054D     319            lcall DO_SPI_G
04E0 7880       320            mov R0, #10000000B ; Single ended, read channel 0
04E2 12054D     321            lcall DO_SPI_G
04E5 E9         322            mov a, R1 ; R1 contains bits 8 and 9
04E6 5403       323            anl a, #00000011B ; We need only the two least significant bits
04E8 F53E       324            mov Result+1, a ; Save result high.
04EA 7855       325            mov R0, #55H ; It doesn't matter what we transmit...
04EC 12054D     326            lcall DO_SPI_G
04EF 893D       327            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
04F1 D2A0       328            setb CE_ADC
04F3 22         329       ret
04F4            330   
04F4            331   Do_Something_With_Result:
04F4 853D30     332            mov x+0, result+0
04F7 853E31     333            mov x+1, result+1
04FA 753200     334            mov x+2, #0
04FD 753300     335            mov x+3, #0
0500            336            
0500 75349A     337            mov y+0, #low (410 % 0x10000) 
0503 753501     337            mov y+1, #high(410 % 0x10000) 
0506 753600     337            mov y+2, #low (410 / 0x10000) 
0509 753700     337            mov y+3, #high(410 / 0x10000) 
050C 1201A8     338            lcall mul32
050F            339            
050F 7534FF     340            mov y+0, #low (1023 % 0x10000) 
0512 753503     340            mov y+1, #high(1023 % 0x10000) 
0515 753600     340            mov y+2, #low (1023 / 0x10000) 
0518 753700     340            mov y+3, #high(1023 / 0x10000) 
051B 120235     341            lcall div32
051E            342            
051E 753411     343            mov y+0, #low (273 % 0x10000) 
0521 753501     343            mov y+1, #high(273 % 0x10000) 
0524 753600     343            mov y+2, #low (273 / 0x10000) 
0527 753700     343            mov y+3, #high(273 / 0x10000) 
052A 120114     344            lcall sub32
052D            345            
052D 12002E     346            lcall hex2bcd
0530 120566     347            lcall Send_3_digit_BCD
0533            348            
0533 E530       349            mov a, x
0535 B43200     350            cjne a, #50, NOT_EQ
0538 4003       351            NOT_EQ: JC REQ_LOW
053A D28C       352            setb TR0
053C 22         353            ret
053D            354            REQ_LOW:
053D C28C       355            clr TR0
053F 22         356            ret
0540            357            
0540            358   Delay:
0540 7AC8       359            mov R2, #200
0542 79DE       360       mov R1, #222
0544 78A6       361       mov R0, #166
0546 D8FE       362       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0548 D9FA       363       djnz R1, $-4 ; 22.51519us*222=4.998ms
054A DAFA       364       djnz R2, $-4 ; 0.996 seconds
054C 22         365       ret
054D            366   
054D            367   DO_SPI_G: 
054D C0E0       368            push acc 
054F 7900       369            mov R1, #0 ; Received byte stored in R1
0551 7A08       370            mov R2, #8 ; Loop counter (8-bits)
0553            371   DO_SPI_G_LOOP: 
0553 E8         372            mov a, R0 ; Byte to write is in R0
0554 33         373            rlc a ; Carry flag has bit to write
0555 F8         374            mov R0, a 
0556 92A1       375            mov MY_MOSI_ADC, c 
0558 D2A3       376            setb MY_SCLK_ADC ; Transmit
055A A2A2       377            mov c, MY_MISO_ADC ; Read received bit
055C E9         378            mov a, R1 ; Save received bit in R1
055D 33         379            rlc a 
055E F9         380            mov R1, a 
055F C2A3       381            clr MY_SCLK_ADC 
0561 DAF0       382            djnz R2, DO_SPI_G_LOOP 
0563 D0E0       383            pop acc 
0565 22         384            ret
0566            385            
0566            386   Send_3_Digit_BCD: ;send 3 digits bcd in BCD var to putty
0566 E539       387       mov a, bcd+1
0568 540F       388       anl a, #0fh
056A 4430       389       orl a, #'0'
056C F8         390       mov r0, a
056D 120584     391       lcall putchar
0570 C000       392            push ar0
0572 A838       392            mov r0, bcd+0
0574 12029E     392            lcall ?Send_BCD
0577 D000       392            pop ar0
0579 740D       393            mov a, #'\r'
057B 120584     394            lcall putchar
057E 740A       395            mov a, #'\n'
0580 120584     396            lcall putchar
0583 22         397            ret
0584            398   
0584            399   ; Send a character using the serial port
0584            400   putchar:
0584 3099FD     401       jnb TI, putchar
0587 C299       402       clr TI
0589 F599       403       mov SBUF, a
058B 22         404       ret
058C            405   
058C            406   ;----------------------------------UI CODE----------------------------------------------
058C            407   generateDisplay:
058C 200103     408       jb start_flag, startDisplay
058F 020648     409       ljmp setupDisplay
0592            410   
0592            411   startDisplay:
0592 C0E0       412            push acc
0594 7401       412            mov a, #1
0596 14         412            dec a
0597 120345     412            lcall ?Set_Cursor_1 ; Select column and row
059A D0E0       412            pop acc
059C C083       413            push dph
059E C082       413            push dpl
05A0 C0E0       413            push acc
05A2 9003B5     413            mov dptr, #run1
05A5 120338     413            lcall ?Send_Constant_String
05A8 D0E0       413            pop acc
05AA D082       413            pop dpl
05AC D083       413            pop dph
05AE C0E0       414            push acc
05B0 7401       414            mov a, #1
05B2 14         414            dec a
05B3 120343     414            lcall ?Set_Cursor_2 ; Select column and row
05B6 D0E0       414            pop acc
05B8 C083       415            push dph
05BA C082       415            push dpl
05BC C0E0       415            push acc
05BE 9003C6     415            mov dptr, #run2
05C1 120338     415            lcall ?Send_Constant_String
05C4 D0E0       415            pop acc
05C6 D082       415            pop dpl
05C8 D083       415            pop dph
05CA            416       
05CA C0E0       417            push acc
05CC 7406       417            mov a, #6
05CE 14         417            dec a
05CF 120345     417            lcall ?Set_Cursor_1 ; Select column and row
05D2 D0E0       417            pop acc
05D4 753000     418            mov x+0, #low (0 % 0x10000) 
05D7 753100     418            mov x+1, #high(0 % 0x10000) 
05DA 753200     418            mov x+2, #low (0 / 0x10000) 
05DD 753300     418            mov x+3, #high(0 / 0x10000) 
05E0 854D30     419       mov x+0, temp
05E3 12002E     420       lcall hex2bcd
05E6            421       ; Display digit 3
05E6 E539       422       mov a, bcd+1
05E8 540F       423       anl a, #0fh
05EA 4430       424       orl a, #'0'
05EC F8         425       mov r0, a
05ED E8         426            mov a, r0
05EE 120304     426            lcall ?WriteData
05F1 C000       427            push ar0
05F3 A838       427            mov r0, bcd+0
05F5 12034A     427            lcall ?Display_BCD
05F8 D000       427            pop ar0 ;display digit 2 and 1
05FA            428   
05FA C0E0       429            push acc
05FC 7410       429            mov a, #16
05FE 14         429            dec a
05FF 120345     429            lcall ?Set_Cursor_1 ; Select column and row
0602 D0E0       429            pop acc
0604 753000     430            mov x+0, #low (0 % 0x10000) 
0607 753100     430            mov x+1, #high(0 % 0x10000) 
060A 753200     430            mov x+2, #low (0 / 0x10000) 
060D 753300     430            mov x+3, #high(0 / 0x10000) 
0610 854530     431       mov x+0, state
0613 12002E     432       lcall hex2bcd
0616            433       ; Display digit 1
0616 E538       434       mov a, bcd+0
0618 540F       435       anl a, #0fh
061A 4430       436       orl a, #'0'
061C F8         437       mov r0, a
061D E8         438            mov a, r0
061E 120304     438            lcall ?WriteData
0621            439   
0621 C0E0       440            push acc
0623 7409       440            mov a, #9
0625 14         440            dec a
0626 120343     440            lcall ?Set_Cursor_2 ; Select column and row
0629 D0E0       440            pop acc
062B C000       441            push ar0
062D A842       441            mov r0, mins_ctr
062F 12034A     441            lcall ?Display_BCD
0632 D000       441            pop ar0
0634 C0E0       442            push acc
0636 740C       442            mov a, #12
0638 14         442            dec a
0639 120343     442            lcall ?Set_Cursor_2 ; Select column and row
063C D0E0       442            pop acc
063E C000       443            push ar0
0640 A841       443            mov r0, secs_ctr
0642 12034A     443            lcall ?Display_BCD
0645 D000       443            pop ar0
0647 22         444       ret
0648            445   
0648            446   ;             1234567890123456
0648            447   ;setup1:  db 'soak            ', 0
0648            448   ;setup2:  db 'tmp:XXX time:XXX', 0
0648            449   ;setup3:  db 'reflow          ', 0
0648            450   
0648            451   ;run1:    db 'temp:XXX state X', 0
0648            452   ;run2:    db 'elapsed XX:XX   ', 0
0648            453   
0648            454   setupDisplay:
0648 E544       455       mov a, edit_sett
064A B40003     456       cjne a, #0, checkScreen1
064D 020665     457       ljmp soakScreen
0650            458   checkScreen1:
0650 B40103     459       cjne a, #1, checkScreen2
0653 020665     460       ljmp soakScreen
0656            461   checkScreen2:
0656 B40203     462       cjne a, #2, checkScreen3
0659 020722     463       ljmp reflowScreen
065C            464   checkScreen3:
065C B40303     465       cjne a, #3, checkScreen4
065F 020722     466       ljmp reflowScreen
0662            467   checkScreen4:
0662 0207DF     468       ljmp coolScreen
0665            469   soakScreen:
0665 C0E0       470            push acc
0667 7401       470            mov a, #1
0669 14         470            dec a
066A 120345     470            lcall ?Set_Cursor_1 ; Select column and row
066D D0E0       470            pop acc
066F C083       471            push dph
0671 C082       471            push dpl
0673 C0E0       471            push acc
0675 900360     471            mov dptr, #setup1
0678 120338     471            lcall ?Send_Constant_String
067B D0E0       471            pop acc
067D D082       471            pop dpl
067F D083       471            pop dph
0681 C0E0       472            push acc
0683 7401       472            mov a, #1
0685 14         472            dec a
0686 120343     472            lcall ?Set_Cursor_2 ; Select column and row
0689 D0E0       472            pop acc
068B C083       473            push dph
068D C082       473            push dpl
068F C0E0       473            push acc
0691 900371     473            mov dptr, #setup2
0694 120338     473            lcall ?Send_Constant_String
0697 D0E0       473            pop acc
0699 D082       473            pop dpl
069B D083       473            pop dph
069D            474   
069D C0E0       475            push acc
069F 7405       475            mov a, #5
06A1 14         475            dec a
06A2 120343     475            lcall ?Set_Cursor_2 ; Select column and row
06A5 D0E0       475            pop acc
06A7 753000     476            mov x+0, #low (0 % 0x10000) 
06AA 753100     476            mov x+1, #high(0 % 0x10000) 
06AD 753200     476            mov x+2, #low (0 / 0x10000) 
06B0 753300     476            mov x+3, #high(0 / 0x10000) 
06B3 854630     477       mov x+0, soak_temp
06B6 12002E     478       lcall hex2bcd
06B9            479       ; Display digit 3
06B9 E539       480       mov a, bcd+1
06BB 540F       481       anl a, #0fh
06BD 4430       482       orl a, #'0'
06BF F8         483       mov r0, a
06C0 E8         484            mov a, r0
06C1 120304     484            lcall ?WriteData
06C4 C000       485            push ar0
06C6 A838       485            mov r0, bcd+0
06C8 12034A     485            lcall ?Display_BCD
06CB D000       485            pop ar0
06CD            486   
06CD C0E0       487            push acc
06CF 740E       487            mov a, #14
06D1 14         487            dec a
06D2 120343     487            lcall ?Set_Cursor_2 ; Select column and row
06D5 D0E0       487            pop acc
06D7 753000     488            mov x+0, #low (0 % 0x10000) 
06DA 753100     488            mov x+1, #high(0 % 0x10000) 
06DD 753200     488            mov x+2, #low (0 / 0x10000) 
06E0 753300     488            mov x+3, #high(0 / 0x10000) 
06E3 854730     489       mov x+0, soak_time
06E6 12002E     490       lcall hex2bcd
06E9            491       ; Display digit 3
06E9 E539       492       mov a, bcd+1
06EB 540F       493       anl a, #0fh
06ED 4430       494       orl a, #'0'
06EF F8         495       mov r0, a
06F0 E8         496            mov a, r0
06F1 120304     496            lcall ?WriteData
06F4 C000       497            push ar0
06F6 A838       497            mov r0, bcd+0
06F8 12034A     497            lcall ?Display_BCD
06FB D000       497            pop ar0
06FD            498   
06FD E544       499       mov a, edit_sett
06FF B4000C     500       cjne a, #0, indic_soak_time
0702 C0E0       501            push acc
0704 7406       501            mov a, #6
0706 14         501            dec a
0707 120345     501            lcall ?Set_Cursor_1 ; Select column and row
070A D0E0       501            pop acc
070C 800A       502       sjmp indic_soak_next
070E            503   indic_soak_time:
070E C0E0       504            push acc
0710 740F       504            mov a, #15
0712 14         504            dec a
0713 120345     504            lcall ?Set_Cursor_1 ; Select column and row
0716 D0E0       504            pop acc
0718            505   indic_soak_next:
0718 C0E0       506            push acc
071A 742A       506            mov a, #'*'
071C 120304     506            lcall ?WriteData
071F D0E0       506            pop acc
0721 22         507       ret
0722            508   reflowScreen:
0722 C0E0       509            push acc
0724 7401       509            mov a, #1
0726 14         509            dec a
0727 120345     509            lcall ?Set_Cursor_1 ; Select column and row
072A D0E0       509            pop acc
072C C083       510            push dph
072E C082       510            push dpl
0730 C0E0       510            push acc
0732 900382     510            mov dptr, #setup3
0735 120338     510            lcall ?Send_Constant_String
0738 D0E0       510            pop acc
073A D082       510            pop dpl
073C D083       510            pop dph
073E C0E0       511            push acc
0740 7401       511            mov a, #1
0742 14         511            dec a
0743 120343     511            lcall ?Set_Cursor_2 ; Select column and row
0746 D0E0       511            pop acc
0748 C083       512            push dph
074A C082       512            push dpl
074C C0E0       512            push acc
074E 900371     512            mov dptr, #setup2
0751 120338     512            lcall ?Send_Constant_String
0754 D0E0       512            pop acc
0756 D082       512            pop dpl
0758 D083       512            pop dph
075A            513     
075A C0E0       514            push acc
075C 7405       514            mov a, #5
075E 14         514            dec a
075F 120343     514            lcall ?Set_Cursor_2 ; Select column and row
0762 D0E0       514            pop acc
0764 753000     515            mov x+0, #low (0 % 0x10000) 
0767 753100     515            mov x+1, #high(0 % 0x10000) 
076A 753200     515            mov x+2, #low (0 / 0x10000) 
076D 753300     515            mov x+3, #high(0 / 0x10000) 
0770 854830     516       mov x+0, reflow_temp
0773 12002E     517       lcall hex2bcd
0776            518       ; Display digit 3
0776 E539       519       mov a, bcd+1
0778 540F       520       anl a, #0fh
077A 4430       521       orl a, #'0'
077C F8         522       mov r0, a
077D E8         523            mov a, r0
077E 120304     523            lcall ?WriteData
0781 C000       524            push ar0
0783 A838       524            mov r0, bcd+0
0785 12034A     524            lcall ?Display_BCD
0788 D000       524            pop ar0
078A C0E0       525            push acc
078C 740E       525            mov a, #14
078E 14         525            dec a
078F 120343     525            lcall ?Set_Cursor_2 ; Select column and row
0792 D0E0       525            pop acc
0794 753000     526            mov x+0, #low (0 % 0x10000) 
0797 753100     526            mov x+1, #high(0 % 0x10000) 
079A 753200     526            mov x+2, #low (0 / 0x10000) 
079D 753300     526            mov x+3, #high(0 / 0x10000) 
07A0 854930     527       mov x+0, reflow_time
07A3 12002E     528       lcall hex2bcd
07A6            529       ; Display digit 3
07A6 E539       530       mov a, bcd+1
07A8 540F       531       anl a, #0fh
07AA 4430       532       orl a, #'0'
07AC F8         533       mov r0, a
07AD E8         534            mov a, r0
07AE 120304     534            lcall ?WriteData
07B1 C000       535            push ar0
07B3 A838       535            mov r0, bcd+0
07B5 12034A     535            lcall ?Display_BCD
07B8 D000       535            pop ar0
07BA E544       536       mov a, edit_sett
07BC B4020C     537       cjne a, #2, indic_refl_time
07BF C0E0       538            push acc
07C1 7406       538            mov a, #6
07C3 14         538            dec a
07C4 120345     538            lcall ?Set_Cursor_1 ; Select column and row
07C7 D0E0       538            pop acc
07C9 800A       539       sjmp indic_refl_next
07CB            540   indic_refl_time:
07CB C0E0       541            push acc
07CD 740F       541            mov a, #15
07CF 14         541            dec a
07D0 120345     541            lcall ?Set_Cursor_1 ; Select column and row
07D3 D0E0       541            pop acc
07D5            542   indic_refl_next:
07D5 C0E0       543            push acc
07D7 742A       543            mov a, #'*'
07D9 120304     543            lcall ?WriteData
07DC D0E0       543            pop acc
07DE 22         544       ret
07DF            545   coolScreen:
07DF C0E0       546            push acc
07E1 7401       546            mov a, #1
07E3 14         546            dec a
07E4 120345     546            lcall ?Set_Cursor_1 ; Select column and row
07E7 D0E0       546            pop acc
07E9 C083       547            push dph
07EB C082       547            push dpl
07ED C0E0       547            push acc
07EF 900393     547            mov dptr, #setup4
07F2 120338     547            lcall ?Send_Constant_String
07F5 D0E0       547            pop acc
07F7 D082       547            pop dpl
07F9 D083       547            pop dph
07FB C0E0       548            push acc
07FD 7401       548            mov a, #1
07FF 14         548            dec a
0800 120343     548            lcall ?Set_Cursor_2 ; Select column and row
0803 D0E0       548            pop acc
0805 C083       549            push dph
0807 C082       549            push dpl
0809 C0E0       549            push acc
080B 9003A4     549            mov dptr, #setup5
080E 120338     549            lcall ?Send_Constant_String
0811 D0E0       549            pop acc
0813 D082       549            pop dpl
0815 D083       549            pop dph
0817            550   
0817 C0E0       551            push acc
0819 7405       551            mov a, #5
081B 14         551            dec a
081C 120343     551            lcall ?Set_Cursor_2 ; Select column and row
081F D0E0       551            pop acc
0821 753000     552            mov x+0, #low (0 % 0x10000) 
0824 753100     552            mov x+1, #high(0 % 0x10000) 
0827 753200     552            mov x+2, #low (0 / 0x10000) 
082A 753300     552            mov x+3, #high(0 / 0x10000) 
082D 854C30     553       mov x+0, cool_temp
0830 12002E     554       lcall hex2bcd
0833            555       ; Display digit 3
0833 E539       556       mov a, bcd+1
0835 540F       557       anl a, #0fh
0837 4430       558       orl a, #'0'
0839 F8         559       mov r0, a
083A E8         560            mov a, r0
083B 120304     560            lcall ?WriteData
083E C000       561            push ar0
0840 A838       561            mov r0, bcd+0
0842 12034A     561            lcall ?Display_BCD
0845 D000       561            pop ar0
0847 22         562       ret
0848            563   
0848            564   
0848            565   pollButtons:
0848 208623     566       jb EDIT, DONT_EDIT           
084B C002       567            push AR2
084D 7A32       567            mov R2, #50
084F 1202BF     567            lcall ?Wait_Milli_Seconds
0852 D002       567            pop AR2                 
0854 208617     568            jb EDIT, DONT_EDIT
0857 3086FD     569            jnb EDIT, $
085A            570   
085A E544       571       mov a, edit_sett
085C B40406     572       cjne a, #4, incEdit
085F 754400     573       mov edit_sett, #0
0862 02058C     574       ljmp generateDisplay
0865 E544       575       mov a, edit_sett
0867 2401       575       add a, #1
0869 F544       575       mov edit_sett, a
086B 02058C     576       ljmp generateDisplay
086E            577   
086E            578   ; 0 - soak temp
086E            579   ; 1 - soak time
086E            580   ; 2 - reflow temp
086E            581   ; 3 - reflow time
086E            582   ; 4 - cool temp   
086E            583   DONT_EDIT:
086E 20834F     584       jb INCR, DONT_INC    
0871 C002       585            push AR2
0873 7A32       585            mov R2, #50
0875 1202BF     585            lcall ?Wait_Milli_Seconds
0878 D002       585            pop AR2                 
087A 208343     586            jb INCR, DONT_INC               
087D 3083FD     587            jnb INCR, $
0880            588       
0880 E544       589       mov a, edit_sett
0882 B4000A     590       cjne a, #0, elem1
0885 E546       591       mov a, soak_temp
0887 2401       591       add a, #1
0889 F546       591       mov soak_temp, a
088B 02058C     592       ljmp generateDisplay
088E 22         593       ret
088F B4010A     594       elem1: cjne a, #1, elem2
0892 E547       595       mov a, soak_time
0894 2401       595       add a, #1
0896 F547       595       mov soak_time, a
0898 02058C     596       ljmp generateDisplay
089B 22         597       ret
089C B4020A     598       elem2: cjne a, #2, elem3
089F E548       599       mov a, reflow_temp
08A1 2401       599       add a, #1
08A3 F548       599       mov reflow_temp, a
08A5 02058C     600       ljmp generateDisplay
08A8 22         601       ret
08A9 B4030A     602       elem3: cjne a, #3, elem4
08AC E549       603       mov a, reflow_time
08AE 2401       603       add a, #1
08B0 F549       603       mov reflow_time, a
08B2 02058C     604       ljmp generateDisplay
08B5 22         605       ret
08B6 E54C       606       mov a, cool_temp
08B8 2401       606       add a, #1
08BA F54C       606       mov cool_temp, a
08BC 02058C     607       ljmp generateDisplay
08BF 22         608       ret
08C0            609       
08C0            610   DONT_INC:
08C0 208068     611       jb DECR, DONT_DEC
08C3 C002       612            push AR2
08C5 7A32       612            mov R2, #50
08C7 1202BF     612            lcall ?Wait_Milli_Seconds
08CA D002       612            pop AR2                 
08CC 20805C     613            jb DECR, DONT_DEC       
08CF 3080FD     614            jnb DECR, $
08D2            615   
08D2 E544       616       mov a, edit_sett
08D4 B4000F     617       cjne a, #0, delem1
08D7 E546       618       mov a, soak_temp
08D9 B40002     618       cjne a, #0, dec_setting_next_74
08DC 8004       618       sjmp dec_setting_end_74
08DE            618   dec_setting_next_74:
08DE 9401       618       subb a, #1
08E0 F546       618       mov soak_temp, a
08E2            618   dec_setting_end_74:
08E2 02058C     619       ljmp generateDisplay
08E5 22         620       ret
08E6 B4010F     621       delem1: cjne a, #1, delem2
08E9 E547       622       mov a, soak_time
08EB B40002     622       cjne a, #0, dec_setting_next_75
08EE 8004       622       sjmp dec_setting_end_75
08F0            622   dec_setting_next_75:
08F0 9401       622       subb a, #1
08F2 F547       622       mov soak_time, a
08F4            622   dec_setting_end_75:
08F4 02058C     623       ljmp generateDisplay
08F7 22         624       ret
08F8 B4020F     625       delem2: cjne a, #2, delem3
08FB E548       626       mov a, reflow_temp
08FD B40002     626       cjne a, #0, dec_setting_next_76
0900 8004       626       sjmp dec_setting_end_76
0902            626   dec_setting_next_76:
0902 9401       626       subb a, #1
0904 F548       626       mov reflow_temp, a
0906            626   dec_setting_end_76:
0906 02058C     627       ljmp generateDisplay
0909 22         628       ret
090A B4030F     629       delem3: cjne a, #3, delem4
090D E549       630       mov a, reflow_time
090F B40002     630       cjne a, #0, dec_setting_next_77
0912 8004       630       sjmp dec_setting_end_77
0914            630   dec_setting_next_77:
0914 9401       630       subb a, #1
0916 F549       630       mov reflow_time, a
0918            630   dec_setting_end_77:
0918 02058C     631       ljmp generateDisplay
091B 22         632       ret
091C E54C       633       mov a, cool_temp
091E B40002     633       cjne a, #0, dec_setting_next_78
0921 8004       633       sjmp dec_setting_end_78
0923            633   dec_setting_next_78:
0923 9401       633       subb a, #1
0925 F54C       633       mov cool_temp, a
0927            633   dec_setting_end_78:
0927 02058C     634       ljmp generateDisplay
092A 22         635       ret
092B            636   
092B 22         637   DONT_DEC: ret
092C            638   ;-------------------------------------------------------------------------------
092C            639   
092C            640   ;-----------------------------------FSM & PWM----------------------------------------
092C            641   
092C            642   reset:
092C 20A613     643            jb RST, DONT_RESET                              ; if 'RESET' is pressed, wait for rebouce
092F C002       644            push AR2
0931 7A32       644            mov R2, #50
0933 1202BF     644            lcall ?Wait_Milli_Seconds
0936 D002       644            pop AR2                         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0938 20A607     645            jb RST, DONT_RESET                              ; if the 'RESET' button is not pressed skip
093B 30A6FD     646            jnb RST, $
093E 7405       647            mov a, #5                                               ; reset to state 5 when reset for safety
0940 F545       648            mov state, a
0942 22         649   DONT_RESET: ret  
0943            650   
0943            651   start_or_not:
0943 20C411     652            jb START_STOP, DONT_START               ; if 'RESET' is pressed, wait for rebouce
0946 C002       653            push AR2
0948 7A32       653            mov R2, #50
094A 1202BF     653            lcall ?Wait_Milli_Seconds
094D D002       653            pop AR2                         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
094F 20C405     654            jb START_STOP, DONT_START               ; if the 'RESET' button is not pressed skip
0952 30C4FD     655            jnb START_STOP, $
0955 B201       656            cpl start_flag
0957 22         657            DONT_START: ret         
0958            658   
0958            659   PWM_OUTPUT:
0958 E54A       660            mov a, pwm
095A B46409     661            cjne a, #100, holding_temp              ; if pwm is 100, then OUTPUT = 1 all 
095D D282       662            setb OUTPUT                                             ; the time
095F 22         663            ret
0960            664   
0960 B40003     665            cjne a, #0, holding_temp                ; if pwm is 0, then OUTPUT = 0 all
0963 C282       666            clr OUTPUT                                              ; the time
0965 22         667            ret
0966            668   
0966            669            holding_temp:   
0966 E53F       670            mov a, Count1ms
0968 B4000E     671            cjne a, #0 , Not_yet                    ; check whether it is time to turn on the pwm pin                
096B C282       672            clr OUTPUT                                              ; clr OUTPUT if at the begining of the period
096D E53F       673            mov a, Count1ms+0
096F B42007     674            cjne a, #low(PWM_HOLD_RATE), Not_yet    ; Warning: this instruction changes the carry flag!
0972 E540       675            mov a, Count1ms+1
0974 B40302     676            cjne a, #high(PWM_HOLD_RATE), Not_yet   ; if Count1ms = PWM_HOLD_RATE, set the OUTPUT to 1
0977 D282       677            setb OUTPUT
0979 22         678   Not_yet: ret
097A            679   
097A            680   Load_Defaults: ; Load defaults if 'keys' are incorrect
097A 754623     681            mov soak_temp, #35                              ; 150
097D 75470A     682            mov soak_time, #10                              ; 45
0980 754832     683            mov reflow_temp, #50                    ; 225
0983 754905     684            mov reflow_time, #5                             ; 30
0986 754C1E     685       mov cool_temp, #30                           ; 50
0989 22         686            ret
098A            687   
098A            688   ;-------------------------------------FSM time!!---------------------------------------
098A            689   FSM:                                                      
098A E545       690            mov a, state
098C            691   state0:                                                  ; default state
098C B40011     692            cjne a, #0, state1                      ; if not state 0, then go to next branch
098F 754A00     693            mov pwm, #0                                     ; at state 0, pwm is 0%
0992 120943     694            lcall start_or_not
0995 300105     695            jnb start_flag, state0_done     ; if start key is not press, the go to state0_done
0998 754501     696            mov state, #1
099B C201       697            clr start_flag
099D            698   state0_done:
099D 0204A1     699            ljmp forever
09A0            700   state1:                                                  ; ramp to soak
09A0 B40115     701            cjne a, #1, state2
09A3 754A64     702            mov pwm, #100
09A6 754B00     703            mov sec, #0
09A9 E546       704            mov a, soak_temp
09AB C3         705            clr c
09AC 954D       706            subb a, temp                            ; if temp > soak_temp, c = 1
09AE 5005       707            jnc state1_done                                 ; if temp is not at soak temp, then go to state1_done
09B0 754502     708            mov state, #2
09B3 D201       709            setb start_flag
09B5            710   state1_done:
09B5 0204A1     711            ljmp forever
09B8            712   
09B8            713   state2:                                                  ; soak/preheat
09B8 B40210     714            cjne a, #2, state3
09BB 754A14     715            mov pwm, #HOLD_PWM
09BE E547       716            mov a, soak_time
09C0 C3         717            clr c
09C1 954B       718            subb a, sec                                     ; if sec > soak time, c = 1
09C3 5003       719            jnc state2_done                                 ; if sec is not at soak time, then go to state2_done 
09C5 754503     720            mov state, #3   
09C8            721   state2_done:
09C8 0204A1     722            ljmp forever
09CB            723   
09CB            724   state3:                                                  ; ramp to peak, prepare to reflow
09CB B40313     725            cjne a, #3, state4
09CE 754A64     726            mov pwm, #100
09D1 754B00     727            mov sec, #0
09D4 E548       728            mov a, reflow_temp
09D6 C3         729            clr c
09D7 954D       730            subb a, temp                            ; if temp > reflow_temp, c = 1
09D9 5003       731            jnc state3_done                                 ; if temp is not at reflow_temp, then go to state3_done 
09DB 754504     732            mov state, #4   
09DE            733   state3_done:
09DE 0204A1     734            ljmp forever
09E1            735   
09E1            736   state4:                                                  ; ramp to peak, prepare to reflow
09E1 B40410     737            cjne a, #4, state5
09E4 754A14     738            mov pwm, #HOLD_PWM
09E7 E549       739            mov a, reflow_time
09E9 C3         740            clr c
09EA 954B       741            subb a, sec                                     ; if sec > reflow_temp, c = 1
09EC 5003       742            jnc state4_done                                 ; if sec is not at reflow time, then go to state4_done 
09EE 754505     743            mov state, #5   
09F1            744   state4_done:
09F1 0204A1     745            ljmp forever
09F4            746   
09F4            747   state5:                                                  ; cooling state
09F4 B40595     748            cjne a, #5, state0
09F7 754A00     749            mov pwm, #0
09FA E54D       750            mov a, temp
09FC C3         751            clr c
09FD 954C       752            subb a, cool_temp                       ; if cool_temp > temp, c = 1
09FF 5003       753            jnc state5_done                                 ; if temp is not at cool_temp, then go to state5_done 
0A01 754500     754            mov state, #0   
0A04            755   state5_done:
0A04 0204A1     756            ljmp forever 
0A07            757   ;----------------------------------------------------------------------------------------
0A07            758   
0A07            759   ;---------------------------------save to nvmem-------------------------------
0A07            760   save_config:
0A07 C0A8       761       push IE ; Save the current state of bit EA in the stack
0A09 C2AF       762       clr EA ; Disable interrupts
0A0B 75D108     763            mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
0A0E 907F80     764            mov dptr, #0x7f80 ; Last page of flash memory
0A11            765            ; Save variables
0A11 E546       766            mov a, soak_temp
0A13 F0         766            movx @dptr, a
0A14 A3         766            inc dptr ; @0x7f80
0A15 E547       767            mov a, soak_time
0A17 F0         767            movx @dptr, a
0A18 A3         767            inc dptr ; @0x7f81
0A19 E548       768            mov a, reflow_temp
0A1B F0         768            movx @dptr, a
0A1C A3         768            inc dptr ; @0x7f82
0A1D E549       769            mov a, reflow_time
0A1F F0         769            movx @dptr, a
0A20 A3         769            inc dptr ; @0x7f83
0A21 E54C       770            mov a, cool_temp
0A23 F0         770            movx @dptr, a
0A24 A3         770            inc dptr ; @0x7f84
0A25 7455       771            mov a, #0x55
0A27 F0         771            movx @dptr, a
0A28 A3         771            inc dptr ; First key value @0x7f84
0A29 74AA       772            mov a, #0xAA
0A2B F0         772            movx @dptr, a
0A2C A3         772            inc dptr ; Second key value @0x7f85
0A2D 75D100     773            mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0A30 43D240     774            orl EECON, #0b01000000 ; Enable auto-erase on next write sequence
0A33 75D150     775            mov FCON, #0x50 ; Write trigger first byte
0A36 75D1A0     776            mov FCON, #0xA0 ; Write trigger second byte
0A39            777            ; CPU idles until writing of flash completes.
0A39 75D100     778            mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0A3C 53D2BF     779            anl EECON, #0b10111111 ; Disable auto-erase
0A3F D0A8       780            pop IE ; Restore the state of bit EA from the stack
0A41 22         781       ret
0A42            782   ;-----------------------------------------------------------------------------
0A42            783   
0A42            784   ;------------------------------read from nvmem--------------------------------
0A42            785   Load_Configuration:
0A42 907F84     786       mov dptr, #0x7f84 ; First key value location.
0A45 E4         787       clr a
0A46 93         787       movc a, @a+dptr
0A47 F8         787       mov R0, a
0A48 A3         787       inc dptr ; 0x7f84 should contain 0x55
0A49 B85524     788       cjne R0, #0x55, jumpToLoadDef
0A4C E4         789       clr a
0A4D 93         789       movc a, @a+dptr
0A4E F8         789       mov R0, a
0A4F A3         789       inc dptr ; 0x7f85 should contain 0xAA
0A50 B8AA1D     790       cjne R0, #0xAA, jumpToLoadDef
0A53            791   ; Keys are good. Get stored values.
0A53 907F80     792       mov dptr, #0x7f80
0A56 E4         793       clr a
0A57 93         793       movc a, @a+dptr
0A58 F546       793       mov soak_temp, a
0A5A A3         793       inc dptr ; 0x7f80
0A5B E4         794       clr a
0A5C 93         794       movc a, @a+dptr
0A5D F547       794       mov soak_time, a
0A5F A3         794       inc dptr ; 0x7f81
0A60 E4         795       clr a
0A61 93         795       movc a, @a+dptr
0A62 F548       795       mov reflow_temp, a
0A64 A3         795       inc dptr ; 0x7f82
0A65 E4         796       clr a
0A66 93         796       movc a, @a+dptr
0A67 F549       796       mov reflow_time, a
0A69 A3         796       inc dptr ; 0x7f83
0A6A E4         797       clr a
0A6B 93         797       movc a, @a+dptr
0A6C F54C       797       mov cool_temp, a
0A6E A3         797       inc dptr
0A6F 22         798       ret
0A70            799   jumpToLoadDef:
0A70 02097A     800            ljmp Load_Defaults
0A73            801   ;----------------------------------------------------------------------------
0A73            802   
0A73            803   ;----------------------------------------------------------------------
0A73            804   cold_junc:
0A73            805   
0A73 22         806   ret
0A74            807   ;----------------------------------------------------------------------
0A74            808   
0A74            809   
0A74            810   ;----------------------------------------------------------------------
0A74            811   hot_junc:
0A74            812   
0A74 22         813   ret
0A75            814   ;----------------------------------------------------------------------
0A75            815   
0A75            816   END
