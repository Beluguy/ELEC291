                 -1   $MODLP51RC2
0000              1   ;--------------------------------------------------------
0000              2   ; Register and bit definitions for the AT89LP51RC2/RB2
0000              3   ;--------------------------------------------------------
0000              4   ; Special Function Registers
0000              5   ;--------------------------------------------------------
0000              6   ACC            DATA 0xe0
0000              7   B              DATA 0xf0
0000              8   PSW            DATA 0xd0
0000              9   SP             DATA 0x81
0000             10   SPX            DATA 0xef
0000             11   DPL            DATA 0x82
0000             12   DPH            DATA 0x83
0000             13   DPLB           DATA 0xd4
0000             14   DPHB           DATA 0xd5
0000             15   PAGE           DATA 0xf6
0000             16   AX             DATA 0xe1
0000             17   BX             DATA 0xf7
0000             18   DSPR           DATA 0xe2
0000             19   FIRD           DATA 0xe3
0000             20   MACL           DATA 0xe4
0000             21   MACH           DATA 0xe5
0000             22   PCON           DATA 0x87
0000             23   AUXR           DATA 0x8e
0000             24   AUXR1          DATA 0xa2
0000             25   DPCF           DATA 0xa1
0000             26   CKRL           DATA 0x97
0000             27   CKCKON0        DATA 0x8f
0000             28   CKCKON1        DATA 0xaf
0000             29   CKSEL          DATA 0x85
0000             30   CLKREG         DATA 0xae
0000             31   OSCCON         DATA 0x86
0000             32   IE             DATA 0xa8
0000             33   IEN0           DATA 0xa8
0000             34   IEN1           DATA 0xb1
0000             35   IPH0           DATA 0xb7
0000             36   IP             DATA 0xb8
0000             37   IPL0           DATA 0xb8
0000             38   IPH1           DATA 0xb3
0000             39   IPL1           DATA 0xb2
0000             40   P0             DATA 0x80
0000             41   P1             DATA 0x90
0000             42   P2             DATA 0xa0
0000             43   P3             DATA 0xb0
0000             44   P4             DATA 0xc0
0000             45   P0M0           DATA 0xe6
0000             46   P0M1           DATA 0xe7
0000             47   P1M0           DATA 0xd6
0000             48   P1M1           DATA 0xd7
0000             49   P2M0           DATA 0xce
0000             50   P2M1           DATA 0xcf
0000             51   P3M0           DATA 0xc6
0000             52   P3M1           DATA 0xc7
0000             53   P4M0           DATA 0xbe
0000             54   P4M1           DATA 0xbf
0000             55   SCON           DATA 0x98
0000             56   SBUF           DATA 0x99
0000             57   SADEN          DATA 0xb9
0000             58   SADDR          DATA 0xa9
0000             59   BDRCON         DATA 0x9b
0000             60   BRL            DATA 0x9a
0000             61   TCON           DATA 0x88
0000             62   TMOD           DATA 0x89
0000             63   TCONB          DATA 0x91
0000             64   TL0            DATA 0x8a
0000             65   TH0            DATA 0x8c
0000             66   TL1            DATA 0x8b
0000             67   TH1            DATA 0x8d
0000             68   RL0            DATA 0xf2
0000             69   RL1            DATA 0xf3
0000             70   RH0            DATA 0xf4
0000             71   RH1            DATA 0xf5
0000             72   WDTRST         DATA 0xa6
0000             73   WDTPRG         DATA 0xa7
0000             74   T2CON          DATA 0xc8
0000             75   T2MOD          DATA 0xc9
0000             76   RCAP2H         DATA 0xcb
0000             77   RCAP2L         DATA 0xca
0000             78   TH2            DATA 0xcd
0000             79   TL2            DATA 0xcc
0000             80   SPCON          DATA 0xc3
0000             81   SPSTA          DATA 0xc4
0000             82   SPDAT          DATA 0xc5
0000             83   SSCON          DATA 0x93
0000             84   SSCS           DATA 0x94
0000             85   SSDAT          DATA 0x95
0000             86   SSADR          DATA 0x96
0000             87   KBLS           DATA 0x9c
0000             88   KBE            DATA 0x9d
0000             89   KBF            DATA 0x9e
0000             90   KBMOD          DATA 0x9f
0000             91   BMSEL          DATA 0x92
0000             92   FCON           DATA 0xd1
0000             93   EECON          DATA 0xd2
0000             94   ACSRA          DATA 0xa3
0000             95   ACSRB          DATA 0xab
0000             96   AREF           DATA 0xbd
0000             97   DADC           DATA 0xa4
0000             98   DADI           DATA 0xa5
0000             99   DADL           DATA 0xac
0000            100   DADH           DATA 0xad
0000            101   CCON           DATA 0xd8
0000            102   CMOD           DATA 0xd9
0000            103   CL             DATA 0xe9
0000            104   CH             DATA 0xf9
0000            105   CCAPM0         DATA 0xda
0000            106   CCAPM1         DATA 0xdb
0000            107   CCAPM2         DATA 0xdc
0000            108   CCAPM3         DATA 0xdd
0000            109   CCAPM4         DATA 0xde
0000            110   CCAP0H         DATA 0xfa
0000            111   CCAP1H         DATA 0xfb
0000            112   CCAP2H         DATA 0xfc
0000            113   CCAP3H         DATA 0xfd
0000            114   CCAP4H         DATA 0xfe
0000            115   CCAP0L         DATA 0xea
0000            116   CCAP1L         DATA 0xeb
0000            117   CCAP2L         DATA 0xec
0000            118   CCAP3L         DATA 0xed
0000            119   CCAP4L         DATA 0xee
0000            120   ;--------------------------------------------------------
0000            121   ; special function bits
0000            122   ;--------------------------------------------------------
0000            123   P              BIT 0xd0
0000            124   F1             BIT 0xd1
0000            125   OV             BIT 0xd2
0000            126   RS0            BIT 0xd3
0000            127   RS1            BIT 0xd4
0000            128   F0             BIT 0xd5
0000            129   AC             BIT 0xd6
0000            130   CY             BIT 0xd7
0000            131   EX0            BIT 0xa8
0000            132   ET0            BIT 0xa9
0000            133   EX1            BIT 0xaa
0000            134   ET1            BIT 0xab
0000            135   ES             BIT 0xac
0000            136   ET2            BIT 0xad
0000            137   EC             BIT 0xae
0000            138   EA             BIT 0xaf
0000            139   PX0            BIT 0xb8
0000            140   PT0            BIT 0xb9
0000            141   PX1            BIT 0xba
0000            142   PT1            BIT 0xbb
0000            143   PS             BIT 0xbc
0000            144   PT2            BIT 0xbd
0000            145   IP0D           BIT 0xbf
0000            146   PPCL           BIT 0xbe
0000            147   PT2L           BIT 0xbd
0000            148   PLS            BIT 0xbc
0000            149   PT1L           BIT 0xbb
0000            150   PX1L           BIT 0xba
0000            151   PT0L           BIT 0xb9
0000            152   PX0L           BIT 0xb8
0000            153   RXD            BIT 0xb0
0000            154   TXD            BIT 0xb1
0000            155   INT0           BIT 0xb2
0000            156   INT1           BIT 0xb3
0000            157   T0             BIT 0xb4
0000            158   T1             BIT 0xb5
0000            159   WR             BIT 0xb6
0000            160   RD             BIT 0xb7
0000            161   RI             BIT 0x98
0000            162   TI             BIT 0x99
0000            163   RB8            BIT 0x9a
0000            164   TB8            BIT 0x9b
0000            165   REN            BIT 0x9c
0000            166   SM2            BIT 0x9d
0000            167   SM1            BIT 0x9e
0000            168   SM0            BIT 0x9f
0000            169   IT0            BIT 0x88
0000            170   IE0            BIT 0x89
0000            171   IT1            BIT 0x8a
0000            172   IE1            BIT 0x8b
0000            173   TR0            BIT 0x8c
0000            174   TF0            BIT 0x8d
0000            175   TR1            BIT 0x8e
0000            176   TF1            BIT 0x8f
0000            177   CP_RL2         BIT 0xc8
0000            178   C_T2           BIT 0xc9
0000            179   TR2            BIT 0xca
0000            180   EXEN2          BIT 0xcb
0000            181   TCLK           BIT 0xcc
0000            182   RCLK           BIT 0xcd
0000            183   EXF2           BIT 0xce
0000            184   TF2            BIT 0xcf
0000            185   CF             BIT 0xdf
0000            186   CR             BIT 0xde
0000            187   CCF4           BIT 0xdc
0000            188   CCF3           BIT 0xdb
0000            189   CCF2           BIT 0xda
0000            190   CCF1           BIT 0xd9
0000            191   CCF0           BIT 0xd8
0000              2   org 0000H
0000 02047A       3      ljmp MainProgram
0003              4   
0003              5   ; Timer/Counter 0 overflow interrupt vector
000B              6   org 0x000B
000B 0203EE       7            ljmp Timer0_ISR
000E              8   
000E              9   ; Timer/Counter 2 overflow interrupt vector
002B             10   org 0x002B
002B 020414      11            ljmp Timer2_ISR
002E             12   
002E             13   CLK                              EQU 22118400
002E             14   BAUD                             EQU 115200
002E             15   BRG_VAL                          EQU (0x100-(CLK/(16*BAUD)))
002E             16   TIMER0_RATE              EQU 1000    ; 1000Hz PWM output signal 
002E             17   TIMER0_RELOAD            EQU ((65536-(CLK/TIMER0_RATE)))
002E             18   TIMER1_RATE              EQU 22050   ; 22050Hz is the sampling rate of the wav file we are playing
002E             19   TIMER1_RELOAD            EQU 0x10000-(SYSCLK/TIMER1_RATE)
002E             20   TIMER2_RATE              EQU 1000    ; 1000Hz, for a timer tick of 1ms
002E             21   TIMER2_RELOAD            EQU ((65536-(CLK/TIMER2_RATE)))
002E             22   
002E             23   HOLD_PWM                         EQU 20          ; 20% pwm for holding the temp constant 
002E             24   PWM_HOLD_RATE            EQU (TIMER0_RATE-(HOLD_PWM*10))
002E             25   
002E             26   ;----------------------------------Ports!----------------------------------------
002E             27   SPEAKER                  EQU P2.4                ; Used with a MOSFET to turn off speaker when not in use
002E             28   OUTPUT                   EQU P0.2                ; output signal to the relay box
002E             29   
002E             30   ; These 'equ' must match the hardware wiring
002E             31   ; They are used by 'LCD_4bit.inc'
002E             32   LCD_RS                   EQU P3.2
002E             33   ; LCD_RW equ Px.x ; Always grounded
002E             34   LCD_E                    EQU P3.3
002E             35   LCD_D4                   EQU P3.4
002E             36   LCD_D5                   EQU P3.5
002E             37   LCD_D6                   EQU P3.6
002E             38   LCD_D7                   EQU P3.7
002E             39   ; These ’EQU’ must match the wiring between the microcontroller and ADC 
002E             40   CE_ADC                   EQU P2.0 
002E             41   MY_MOSI_ADC          EQU P2.1 
002E             42   MY_MISO_ADC      EQU P2.2 
002E             43   MY_SCLK_ADC      EQU P1.7 
002E             44   
002E             45   ; The pins used for SPI for flash memory 
002E             46   FLASH_CE                 EQU P0.7                ; Pin 1
002E             47   MY_MOSI                  EQU P2.5                ; Pin 5
002E             48   MY_MISO                  EQU P2.7                ; Pin 2
002E             49   MY_SCLK                  EQU P0.4                ; Pin 6
002E             50   
002E             51   DECR            EQU P0.0                 ; button to increment current selection
002E             52   INCR            EQU P0.3                 ; button to increment current selection
002E             53   EDIT                     EQU P0.6                ; button for changing what to edit
002E             54   START_STOP               EQU P4.5                ; button to start/stop reflow
002E             55   RST                              EQU     P2.6            ; button to reset
002E             56   ; i have buttons on 2.6, 4.5, 0.6, 0.3, 0.0 (left to right)
002E             57   ;--------------------------------------------------------------------------------
002E             58   
002E             59   ; These register definitions needed by 'math32.inc'
0030             60   DSEG at 30H
0030             61   x:                               ds 4
0034             62   y:                               ds 4
0038             63   bcd:                             ds 5
003D             64   Result:                          ds 2
003F             65   
003F             66   ;--------------------for clock----------------------
003F             67   Count1ms:                ds 2 ; Used to determine when one second has passed
0041             68   secs_ctr:                ds 1
0042             69   mins_ctr:                ds 1
0043             70   pwm_time:                        ds 1 ; Used to check whether it is time to turn on the pwm output
0044             71   ;---------------------------------------------------
0044             72   
0044             73   ;--------------------for settings-------------------
0044             74   edit_sett:               ds 1 ; which segment are we editing 
0045             75   ; 0 - soak temp
0045             76   ; 1 - soak time
0045             77   ; 2 - reflow temp
0045             78   ; 3 - reflow time
0045             79   ; 4 - cool temp
0045             80   
0045             81   ;---------------------------------------------------
0045             82   
0045             83   ;--------------------for FSM------------------------
0045             84   state:                           ds 1                            
0046             85   soak_temp:                       ds 1
0047             86   soak_time:                       ds 1
0048             87   reflow_temp:             ds 1
0049             88   reflow_time:             ds 1
004A             89   cool_temp:                       ds 1
004B             90   pwm:                             ds 1
004C             91   sec:                             ds 1
004D             92   temp:                            ds 1
004E             93   ;---------------------------------------------------
004E             94   
0000             95   BSEG
0000             96   mf:                              dbit 1 ; flag for math32
0001             97   start_flag:              dbit 1
0002             98   one_second_flag:         dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0003             99   safety_overheat:    dbit 1 ; for overheat safety feature
0004            100   
002E            101   CSEG
                546   $LIST
                105   	$LIST
0360            107   
0360            108   ;------------------UI-UX vars---------------------
0360            109   ;            1234567890123456
0360 736F616B   110   setup1:  db 'soak            ', 0
     20202020
     20202020
     20202020
     00
0371 746D703A   111   setup2:  db 'tmp:XXX time:XXX', 0
     58585820
     74696D65
     3A585858
     00
0382 7265666C   112   setup3:  db 'refl            ', 0
     20202020
     20202020
     20202020
     00
0393 636F6F6C   113   setup4:  db 'cool *          ', 0
     202A2020
     20202020
     20202020
     00
03A4 746D703A   114   setup5:  db 'tmp:XXX         ', 0
     58585820
     20202020
     20202020
     00
03B5            115   
03B5 74656D70   116   run1:    db 'temp:XXX state X', 0
     3A585858
     20737461
     74652058
     00
03C6 656C6170   117   run2:    db 'elapsed XX:XX   ', 0
     73656420
     58583A58
     58202020
     00
03D7            118   
03D7            119   Timer0_Init:
03D7 E589       120            mov a, TMOD
03D9 54F0       121            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
03DB 4401       122            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
03DD F589       123            mov TMOD, a
03DF 758CA9     124            mov TH0, #high(TIMER0_RELOAD)
03E2 758A9A     125            mov TL0, #low(TIMER0_RELOAD)
03E5            126            ; Set autoreload value
03E5 75F4A9     127            mov RH0, #high(TIMER0_RELOAD)
03E8 75F29A     128            mov RL0, #low(TIMER0_RELOAD)
03EB            129            ; Enable the timer and interrupts
03EB D2A9       130       setb ET0  ; Enable timer 0 interrupt
03ED            131       ; setb TR0  ; Start timer 0
03ED 22         132            ret
03EE            133   
03EE            134   ;---------------------------------;
03EE            135   ; ISR for timer 0.  Set to execute;
03EE            136   ; every 1/4096Hz to generate a    ;
03EE            137   ; 2048 Hz square wave at pin P1.1 ;
03EE            138   ;---------------------------------;
03EE            139   Timer0_ISR:
03EE            140            ;clr TF0  ; According to the data sheet this is done for us already.
03EE 758CA9     141            mov TH0, #high(TIMER0_RELOAD)
03F1 758A9A     142            mov TL0, #low(TIMER0_RELOAD)
03F4            143            ; Set autoreload value
03F4 75F4A9     144            mov RH0, #high(TIMER0_RELOAD)
03F7 75F29A     145            mov RL0, #low(TIMER0_RELOAD)
03FA 32         146            reti
03FB            147   
03FB            148   ;---------------------------------;
03FB            149   ; Routine to initialize the ISR   ;
03FB            150   ; for timer 2                     ;
03FB            151   ;---------------------------------;
03FB            152   Timer2_Init:
03FB 75C800     153            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
03FE 75CDA9     154            mov TH2, #high(TIMER2_RELOAD)
0401 75CC9A     155            mov TL2, #low(TIMER2_RELOAD)
0404            156            ; Set the reload value
0404 75CBA9     157            mov RCAP2H, #high(TIMER2_RELOAD)
0407 75CA9A     158            mov RCAP2L, #low(TIMER2_RELOAD)
040A            159            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
040A E4         160            clr a
040B F53F       161            mov Count1ms+0, a
040D F540       162            mov Count1ms+1, a
040F            163            ; Enable the timer and interrupts
040F D2AD       164       setb ET2  ; Enable timer 2 interrupt
0411 D2CA       165       setb TR2  ; Enable timer 2
0413 22         166            ret
0414            167   
0414            168   ;---------------------------------;
0414            169   ; ISR for timer 2                 ;
0414            170   ;---------------------------------;
0414            171   Timer2_ISR:
0414 C2CF       172            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0416            173            ;cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0416            174            
0416            175            ; The two registers used in the ISR must be saved in the stack
0416 C0E0       176            push acc
0418 C0D0       177            push psw
041A            178            
041A            179            ; Increment the 16-bit one mili second counter
041A 053F       180            inc Count1ms+0    ; Increment the low 8-bits first
041C E53F       181            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
041E 7002       182            jnz Inc_Done
0420 0540       183            inc Count1ms+1
0422            184   
0422            185   Inc_Done:
0422            186            ; Check if second has passed
0422 E53F       187            mov a, Count1ms+0
0424 B4E831     188            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0427 E540       189            mov a, Count1ms+1
0429 B4032C     190            cjne a, #high(1000), Timer2_ISR_done
042C            191            
042C            192            ; 1000 milliseconds have passed.  Set a flag so the main program knows
042C D202       193            setb one_second_flag ; Let the main program know second had passed
042E            194                    
042E            195            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
042E E4         196            clr a
042F F53F       197            mov Count1ms+0, a
0431 F540       198            mov Count1ms+1, a
0433            199            
0433            200            ; reset secs_ctr if hits 60, increment 1 to minutes
0433            201            ; Increment the seconds counter
0433 E541       202            mov a, secs_ctr
0435 B45910     203            cjne a, #0x59, Timer2_ISR_increment_s
0438 E4         204            clr a
0439 D4         205            da a ; Decimal adjust instruction.  Check datasheet for more details!
043A F541       206            mov secs_ctr, a
043C            207            
043C            208            ; increment the minutes counter
043C E542       209            mov a, mins_ctr
043E B4590F     210            cjne a, #0x59, Timer2_ISR_increment_m
0441 E4         211            clr a
0442 D4         212            da a
0443 F542       213            mov mins_ctr, a
0445            214   
0445 020458     215            ljmp Timer2_ISR_done
0448            216            
0448            217   Timer2_ISR_increment_s:
0448 2401       218            add a, #0x01
044A D4         219            da a ; Decimal adjust instruction.  Check datasheet for more details!
044B F541       220            mov secs_ctr, a
044D 020458     221            ljmp Timer2_ISR_done
0450            222   Timer2_ISR_increment_m:
0450 2401       223            add a, #0x01
0452 D4         224            da a ; Decimal adjust instruction.  Check datasheet for more details!
0453 F542       225            mov mins_ctr, a
0455 020458     226            ljmp Timer2_ISR_done
0458            227   Timer2_ISR_done:
0458 D0D0       228            pop psw
045A D0E0       229            pop acc
045C 32         230            reti
045D            231   
045D            232   ; Configure the serial port and baud rate
045D            233   InitSerialPort:
045D            234       ; Since the reset button bounces, we need to wait a bit before
045D            235       ; sending messages, otherwise we risk displaying gibberish!
045D 79DE       236            mov R1, #222
045F 78A6       237       mov R0, #166
0461 D8FE       238       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0463 D9FA       239       djnz R1, $-4 ; 22.51519us*222=4.998ms
0465            240       ; Now we can proceed with the configuration
0465 438780     241            orl     PCON,#0x80
0468 759852     242            mov     SCON,#0x52
046B 759B00     243            mov     BDRCON,#0x00
046E 759AF4     244            mov     BRL,#BRG_VAL
0471 759B1E     245            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
0474 22         246       ret
0475            247       
0475            248   INIT_SPI: 
0475 D2A2       249            setb MY_MISO_ADC ; Make MISO an input pin
0477 C297       250            clr MY_SCLK_ADC ; For mode (0,0) SCLK is zero
0479 22         251            ret
047A            252   
047A            253   ; -------------------------------------------------- MAIN PROGRAM LOOP ----------------------------------------------
047A            254   
047A            255   MainProgram: ; setup()
047A 75817F     256       mov SP, #7FH                                                 ; Set the stack pointer to the begining of idata
047D            257       
047D C282       258            clr OUTPUT                                                      ; pwm is set to low by default
047F 12093B     259            lcall Load_Configuration ; initialize settings
0482 12045D     260       lcall InitSerialPort
0485 120475     261       lcall INIT_SPI
0488 12030E     262       lcall LCD_4BIT
048B            263   
048B            264       ;initialize flags
048B C201       265       clr start_flag
048D C203       266       clr safety_overheat
048F            267   
048F            268       ;initialize fsm
048F 754500     269       mov state, #0
0492            270   
0492            271       ;init clock
0492 754100     272       mov secs_ctr, #0
0495 754200     273       mov mins_ctr, #0
0498 C202       274       clr one_second_flag
049A            275   
049A            276       ;init settings
049A 754400     277       mov edit_sett, #0
049D            278       
049D 1203D7     279       lcall Timer0_Init
04A0            280       ;lcall Timer1_Init                   ;uncomment for speaker config
04A0 1203FB     281       lcall Timer2_Init
04A3            282   
04A3 D2AF       283       setb EA                                                      ; Enable Global interrupts
04A5            284   
04A5            285   forever: ;loop() please only place function calls into the loop!
04A5 300202     286       jnb one_second_flag, skipDisplay     ; this segment only executes once a second
04A8 C202       287       clr one_second_flag
04AA            288       
04AA            289       ;lcall readADC                                               ; reads ch0 and saves result to Result as 2 byte binary
04AA            290       ;lcall Do_Something_With_Result ; convert to bcd and send to serial
04AA            291       ;lcall checkOverheat
04AA            292       skipDisplay:                                                 ; end segment
04AA            293   
04AA 200109     294       jb start_flag, skipPoll
04AD 12076A     295       lcall pollButtons                                    ; poll buttons for editing screen
04B0 120574     296       lcall generateDisplay
04B3            297       
04B3 0204A5     298       ljmp forever
04B6            299       skipPoll: 
04B6            300   
04B6            301       ;lcall reset                                                 ; check if reset is pressed
04B6            302       ;ljmp FSM                                                    ; finite state machine logic
04B6 0204A5     303            ljmp forever
04B9            304   
04B9            305   ; ---------------------------------------------------------------------------------------------------
04B9            306   
04B9            307   ;----------------------------------safety-features---------------------------------------------------
04B9            308   checkOverheat:
04B9 E54D       309       mov a, temp
04BB C3         310            clr c
04BC 94FB       311            subb a, #251                            ; if 251 > temp, c = 1
04BE 4006       312            jc notOverheat                          ; return if notOverheating
04C0 200306     313       jb safety_overheat, overheatReset ; check if flag is set, if set that means has been overheating for prolonged time
04C3 D203       314            setb safety_overheat        ; set overheat flag for next time
04C5 22         315       ret
04C6            316   notOverheat:
04C6 C203       317       clr safety_overheat
04C8 22         318            ret
04C9            319   overheatReset:
04C9 C203       320       clr safety_overheat
04CB 7405       321       mov a, #5                                            ; reset to state 5 when reset for safety
04CD 22         322       ret
04CE            323   ;----------------------------------------------------------------------------------------------------
04CE            324   readADC:
04CE C2A0       325       clr CE_ADC
04D0 7801       326            mov R0, #00000001B ; Start bit:1
04D2 120535     327            lcall DO_SPI_G
04D5 7880       328            mov R0, #10000000B ; Single ended, read channel 0
04D7 120535     329            lcall DO_SPI_G
04DA E9         330            mov a, R1 ; R1 contains bits 8 and 9
04DB 5403       331            anl a, #00000011B ; We need only the two least significant bits
04DD F53E       332            mov Result+1, a ; Save result high.
04DF 7855       333            mov R0, #55H ; It doesn't matter what we transmit...
04E1 120535     334            lcall DO_SPI_G
04E4 893D       335            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
04E6 D2A0       336            setb CE_ADC
04E8 22         337       ret
04E9            338   
04E9            339   Do_Something_With_Result:
04E9 853D30     340            mov x+0, result+0
04EC 853E31     341            mov x+1, result+1
04EF 753200     342            mov x+2, #0
04F2 753300     343            mov x+3, #0
04F5            344            
04F5 75349A     345            mov y+0, #low (410 % 0x10000) 
04F8 753501     345            mov y+1, #high(410 % 0x10000) 
04FB 753600     345            mov y+2, #low (410 / 0x10000) 
04FE 753700     345            mov y+3, #high(410 / 0x10000) 
0501 1201A8     346            lcall mul32
0504            347            
0504 7534FF     348            mov y+0, #low (1023 % 0x10000) 
0507 753503     348            mov y+1, #high(1023 % 0x10000) 
050A 753600     348            mov y+2, #low (1023 / 0x10000) 
050D 753700     348            mov y+3, #high(1023 / 0x10000) 
0510 120235     349            lcall div32
0513            350            
0513 753411     351            mov y+0, #low (273 % 0x10000) 
0516 753501     351            mov y+1, #high(273 % 0x10000) 
0519 753600     351            mov y+2, #low (273 / 0x10000) 
051C 753700     351            mov y+3, #high(273 / 0x10000) 
051F 120114     352            lcall sub32
0522            353            
0522 12002E     354            lcall hex2bcd
0525 12054E     355            lcall Send_3_digit_BCD
0528            356            
0528 E530       357            mov a, x
052A B43200     358            cjne a, #50, NOT_EQ
052D 4003       359            NOT_EQ: JC REQ_LOW
052F D28C       360            setb TR0
0531 22         361            ret
0532            362            REQ_LOW:
0532 C28C       363            clr TR0
0534 22         364            ret
0535            365   
0535            366   DO_SPI_G: 
0535 C0E0       367            push acc 
0537 7900       368            mov R1, #0 ; Received byte stored in R1
0539 7A08       369            mov R2, #8 ; Loop counter (8-bits)
053B            370   DO_SPI_G_LOOP: 
053B E8         371            mov a, R0 ; Byte to write is in R0
053C 33         372            rlc a ; Carry flag has bit to write
053D F8         373            mov R0, a 
053E 92A1       374            mov MY_MOSI_ADC, c 
0540 D297       375            setb MY_SCLK_ADC ; Transmit
0542 A2A2       376            mov c, MY_MISO_ADC ; Read received bit
0544 E9         377            mov a, R1 ; Save received bit in R1
0545 33         378            rlc a 
0546 F9         379            mov R1, a 
0547 C297       380            clr MY_SCLK_ADC 
0549 DAF0       381            djnz R2, DO_SPI_G_LOOP 
054B D0E0       382            pop acc 
054D 22         383            ret
054E            384            
054E            385   Send_3_Digit_BCD: ;send 3 digits bcd in BCD var to putty
054E E539       386       mov a, bcd+1
0550 540F       387       anl a, #0fh
0552 4430       388       orl a, #'0'
0554 F8         389       mov r0, a
0555 12056C     390       lcall putchar
0558 C000       391            push ar0
055A A838       391            mov r0, bcd+0
055C 12029E     391            lcall ?Send_BCD
055F D000       391            pop ar0
0561 740D       392            mov a, #'\r'
0563 12056C     393            lcall putchar
0566 740A       394            mov a, #'\n'
0568 12056C     395            lcall putchar
056B 22         396            ret
056C            397   
056C            398   ; Send a character using the serial port
056C            399   putchar:
056C 3099FD     400       jnb TI, putchar
056F C299       401       clr TI
0571 F599       402       mov SBUF, a
0573 22         403       ret
0574            404   
0574            405   ;----------------------------------UI CODE----------------------------------------------
0574            406   generateDisplay:
0574 200103     407       jb start_flag, startDisplay
0577 02060F     408       ljmp setupDisplay
057A            409   
057A            410   startDisplay:
057A C0E0       411            push acc
057C 7401       411            mov a, #1
057E 14         411            dec a
057F 120345     411            lcall ?Set_Cursor_1 ; Select column and row
0582 D0E0       411            pop acc
0584 C083       412            push dph
0586 C082       412            push dpl
0588 C0E0       412            push acc
058A 9003B5     412            mov dptr, #run1
058D 120338     412            lcall ?Send_Constant_String
0590 D0E0       412            pop acc
0592 D082       412            pop dpl
0594 D083       412            pop dph
0596 C0E0       413            push acc
0598 7401       413            mov a, #1
059A 14         413            dec a
059B 120343     413            lcall ?Set_Cursor_2 ; Select column and row
059E D0E0       413            pop acc
05A0 C083       414            push dph
05A2 C082       414            push dpl
05A4 C0E0       414            push acc
05A6 9003C6     414            mov dptr, #run2
05A9 120338     414            lcall ?Send_Constant_String
05AC D0E0       414            pop acc
05AE D082       414            pop dpl
05B0 D083       414            pop dph
05B2            415       
05B2 C0E0       416            push acc
05B4 7406       416            mov a, #6
05B6 14         416            dec a
05B7 120345     416            lcall ?Set_Cursor_1 ; Select column and row
05BA D0E0       416            pop acc
05BC E54D       417       mov a, temp
05BE 120809     418       lcall SendToLCD
05C1            419   
05C1 C0E0       420            push acc
05C3 7410       420            mov a, #16
05C5 14         420            dec a
05C6 120345     420            lcall ?Set_Cursor_1 ; Select column and row
05C9 D0E0       420            pop acc
05CB 753000     421            mov x+0, #low (0 % 0x10000) 
05CE 753100     421            mov x+1, #high(0 % 0x10000) 
05D1 753200     421            mov x+2, #low (0 / 0x10000) 
05D4 753300     421            mov x+3, #high(0 / 0x10000) 
05D7 854530     422       mov x+0, state
05DA 12002E     423       lcall hex2bcd
05DD            424       ; Display digit 1
05DD E538       425       mov a, bcd+0
05DF 540F       426       anl a, #0fh
05E1 4430       427       orl a, #'0'
05E3 F8         428       mov r0, a
05E4 E8         429            mov a, r0
05E5 120304     429            lcall ?WriteData
05E8            430   
05E8 C0E0       431            push acc
05EA 7409       431            mov a, #9
05EC 14         431            dec a
05ED 120343     431            lcall ?Set_Cursor_2 ; Select column and row
05F0 D0E0       431            pop acc
05F2 C000       432            push ar0
05F4 A842       432            mov r0, mins_ctr
05F6 12034A     432            lcall ?Display_BCD
05F9 D000       432            pop ar0
05FB C0E0       433            push acc
05FD 740C       433            mov a, #12
05FF 14         433            dec a
0600 120343     433            lcall ?Set_Cursor_2 ; Select column and row
0603 D0E0       433            pop acc
0605 C000       434            push ar0
0607 A841       434            mov r0, secs_ctr
0609 12034A     434            lcall ?Display_BCD
060C D000       434            pop ar0
060E 22         435       ret
060F            436   
060F            437   ;             1234567890123456
060F            438   ;setup1:  db 'soak            ', 0
060F            439   ;setup2:  db 'tmp:XXX time:XXX', 0
060F            440   ;setup3:  db 'reflow          ', 0
060F            441   
060F            442   ;run1:    db 'temp:XXX state X', 0
060F            443   ;run2:    db 'elapsed XX:XX   ', 0
060F            444   
060F            445   setupDisplay:
060F E544       446       mov a, edit_sett
0611 B40003     447       cjne a, #0, checkScreen1
0614 02062C     448       ljmp soakScreen
0617            449   checkScreen1:
0617 B40103     450       cjne a, #1, checkScreen2
061A 02062C     451       ljmp soakScreen
061D            452   checkScreen2:
061D B40203     453       cjne a, #2, checkScreen3
0620 0206A7     454       ljmp reflowScreen
0623            455   checkScreen3:
0623 B40303     456       cjne a, #3, checkScreen4
0626 0206A7     457       ljmp reflowScreen
0629            458   checkScreen4:
0629 020722     459       ljmp coolScreen
062C            460   soakScreen:
062C C0E0       461            push acc
062E 7401       461            mov a, #1
0630 14         461            dec a
0631 120345     461            lcall ?Set_Cursor_1 ; Select column and row
0634 D0E0       461            pop acc
0636 C083       462            push dph
0638 C082       462            push dpl
063A C0E0       462            push acc
063C 900360     462            mov dptr, #setup1
063F 120338     462            lcall ?Send_Constant_String
0642 D0E0       462            pop acc
0644 D082       462            pop dpl
0646 D083       462            pop dph
0648 C0E0       463            push acc
064A 7401       463            mov a, #1
064C 14         463            dec a
064D 120343     463            lcall ?Set_Cursor_2 ; Select column and row
0650 D0E0       463            pop acc
0652 C083       464            push dph
0654 C082       464            push dpl
0656 C0E0       464            push acc
0658 900371     464            mov dptr, #setup2
065B 120338     464            lcall ?Send_Constant_String
065E D0E0       464            pop acc
0660 D082       464            pop dpl
0662 D083       464            pop dph
0664            465   
0664            466   updateSoakScreen:
0664 C0E0       467            push acc
0666 7405       467            mov a, #5
0668 14         467            dec a
0669 120343     467            lcall ?Set_Cursor_2 ; Select column and row
066C D0E0       467            pop acc
066E E546       468       mov a, soak_temp
0670 120809     469       lcall SendToLCD
0673            470   
0673 C0E0       471            push acc
0675 740E       471            mov a, #14
0677 14         471            dec a
0678 120343     471            lcall ?Set_Cursor_2 ; Select column and row
067B D0E0       471            pop acc
067D E547       472       mov a, soak_time
067F 120809     473       lcall SendToLCD
0682            474   
0682 E544       475       mov a, edit_sett
0684 B4000C     476       cjne a, #0, indic_soak_time
0687 C0E0       477            push acc
0689 7406       477            mov a, #6
068B 14         477            dec a
068C 120345     477            lcall ?Set_Cursor_1 ; Select column and row
068F D0E0       477            pop acc
0691 800A       478       sjmp indic_soak_next
0693            479   indic_soak_time:
0693 C0E0       480            push acc
0695 740F       480            mov a, #15
0697 14         480            dec a
0698 120345     480            lcall ?Set_Cursor_1 ; Select column and row
069B D0E0       480            pop acc
069D            481   indic_soak_next:
069D C0E0       482            push acc
069F 742A       482            mov a, #'*'
06A1 120304     482            lcall ?WriteData
06A4 D0E0       482            pop acc
06A6 22         483       ret
06A7            484   reflowScreen:
06A7 C0E0       485            push acc
06A9 7401       485            mov a, #1
06AB 14         485            dec a
06AC 120345     485            lcall ?Set_Cursor_1 ; Select column and row
06AF D0E0       485            pop acc
06B1 C083       486            push dph
06B3 C082       486            push dpl
06B5 C0E0       486            push acc
06B7 900382     486            mov dptr, #setup3
06BA 120338     486            lcall ?Send_Constant_String
06BD D0E0       486            pop acc
06BF D082       486            pop dpl
06C1 D083       486            pop dph
06C3 C0E0       487            push acc
06C5 7401       487            mov a, #1
06C7 14         487            dec a
06C8 120343     487            lcall ?Set_Cursor_2 ; Select column and row
06CB D0E0       487            pop acc
06CD C083       488            push dph
06CF C082       488            push dpl
06D1 C0E0       488            push acc
06D3 900371     488            mov dptr, #setup2
06D6 120338     488            lcall ?Send_Constant_String
06D9 D0E0       488            pop acc
06DB D082       488            pop dpl
06DD D083       488            pop dph
06DF            489   updateReflowScreen:
06DF C0E0       490            push acc
06E1 7405       490            mov a, #5
06E3 14         490            dec a
06E4 120343     490            lcall ?Set_Cursor_2 ; Select column and row
06E7 D0E0       490            pop acc
06E9 E548       491       mov a, reflow_temp
06EB 120809     492       lcall SendToLCD
06EE            493       
06EE C0E0       494            push acc
06F0 740E       494            mov a, #14
06F2 14         494            dec a
06F3 120343     494            lcall ?Set_Cursor_2 ; Select column and row
06F6 D0E0       494            pop acc
06F8 E549       495       mov a, reflow_time
06FA 120809     496       lcall SendToLCD
06FD            497       
06FD E544       498       mov a, edit_sett
06FF B4020C     499       cjne a, #2, indic_refl_time
0702 C0E0       500            push acc
0704 7406       500            mov a, #6
0706 14         500            dec a
0707 120345     500            lcall ?Set_Cursor_1 ; Select column and row
070A D0E0       500            pop acc
070C 800A       501       sjmp indic_refl_next
070E            502   indic_refl_time:
070E C0E0       503            push acc
0710 740F       503            mov a, #15
0712 14         503            dec a
0713 120345     503            lcall ?Set_Cursor_1 ; Select column and row
0716 D0E0       503            pop acc
0718            504   indic_refl_next:
0718 C0E0       505            push acc
071A 742A       505            mov a, #'*'
071C 120304     505            lcall ?WriteData
071F D0E0       505            pop acc
0721 22         506       ret
0722            507   coolScreen:
0722 C0E0       508            push acc
0724 7401       508            mov a, #1
0726 14         508            dec a
0727 120345     508            lcall ?Set_Cursor_1 ; Select column and row
072A D0E0       508            pop acc
072C C083       509            push dph
072E C082       509            push dpl
0730 C0E0       509            push acc
0732 900393     509            mov dptr, #setup4
0735 120338     509            lcall ?Send_Constant_String
0738 D0E0       509            pop acc
073A D082       509            pop dpl
073C D083       509            pop dph
073E C0E0       510            push acc
0740 7401       510            mov a, #1
0742 14         510            dec a
0743 120343     510            lcall ?Set_Cursor_2 ; Select column and row
0746 D0E0       510            pop acc
0748 C083       511            push dph
074A C082       511            push dpl
074C C0E0       511            push acc
074E 9003A4     511            mov dptr, #setup5
0751 120338     511            lcall ?Send_Constant_String
0754 D0E0       511            pop acc
0756 D082       511            pop dpl
0758 D083       511            pop dph
075A            512   updateCoolScreen:
075A C0E0       513            push acc
075C 7405       513            mov a, #5
075E 14         513            dec a
075F 120343     513            lcall ?Set_Cursor_2 ; Select column and row
0762 D0E0       513            pop acc
0764 E54A       514       mov a, cool_temp
0766 120809     515       lcall SendToLCD
0769 22         516       ret
076A            517   
076A            518   
076A            519   pollButtons:
076A 20861F     520       jb EDIT, DONT_EDIT           
076D C002       521            push AR2
076F 7A32       521            mov R2, #50
0771 1202BF     521            lcall ?Wait_Milli_Seconds
0774 D002       521            pop AR2                 
0776 208613     522            jb EDIT, DONT_EDIT
0779 3086FD     523            jnb EDIT, $
077C            524   
077C E544       525       mov a, edit_sett
077E B40406     526       cjne a, #4, incEdit
0781 754400     527       mov edit_sett, #0
0784 02060F     528       ljmp setupDisplay
0787 0544       529       incEdit: inc edit_sett
0789 02060F     530       ljmp setupDisplay
078C            531   
078C            532   ; 0 - soak temp
078C            533   ; 1 - soak time
078C            534   ; 2 - reflow temp
078C            535   ; 3 - reflow time
078C            536   ; 4 - cool temp   
078C            537   DONT_EDIT:
078C 20833B     538       jb INCR, DONT_INC    
078F C002       539            push AR2
0791 7A32       539            mov R2, #50
0793 1202BF     539            lcall ?Wait_Milli_Seconds
0796 D002       539            pop AR2                 
0798 20832F     540            jb INCR, DONT_INC               
079B 3083FD     541            jnb INCR, $
079E            542       
079E E544       543       mov a, edit_sett
07A0 B40006     544       cjne a, #0, elem1
07A3 0546       545       inc soak_temp
07A5            546       ;lcall save_config                                   ; save config to nvmem
07A5 120664     547       lcall updateSoakScreen
07A8 22         548       ret
07A9 B40106     549       elem1: cjne a, #1, elem2
07AC 0546       550       inc soak_temp
07AE            551       ;lcall save_config                                   ; save config to nvmem
07AE 120664     552       lcall updateSoakScreen
07B1 22         553       ret
07B2 B40206     554       elem2: cjne a, #2, elem3
07B5 0548       555       inc reflow_temp
07B7 1206DF     556       lcall updateReflowScreen
07BA            557       ;lcall save_config                                   ; save config to nvmem
07BA 22         558       ret
07BB B40306     559       elem3: cjne a, #3, elem4
07BE 0549       560       inc reflow_time
07C0 1206DF     561       lcall updateReflowScreen
07C3            562       ;lcall save_config                                   ; save config to nvmem
07C3 22         563       ret
07C4 054A       564       elem4: inc cool_temp
07C6 12075A     565       lcall updateCoolScreen
07C9            566       ;lcall save_config                                   ; save config to nvmem
07C9 22         567       ret
07CA            568       
07CA            569   DONT_INC:
07CA 20803B     570       jb DECR, DONT_DEC
07CD C002       571            push AR2
07CF 7A32       571            mov R2, #50
07D1 1202BF     571            lcall ?Wait_Milli_Seconds
07D4 D002       571            pop AR2                 
07D6 20802F     572            jb DECR, DONT_DEC       
07D9 3080FD     573            jnb DECR, $
07DC            574   
07DC E544       575       mov a, edit_sett
07DE B40006     576       cjne a, #0, delem1
07E1 1546       577       dec soak_temp
07E3 120664     578       lcall updateSoakScreen
07E6            579       ;lcall save_config                                   ; save config to nvmem
07E6 22         580       ret
07E7 B40106     581       delem1: cjne a, #1, delem2
07EA 1547       582       dec soak_time
07EC 120664     583       lcall updateSoakScreen
07EF            584       ;lcall save_config                                   ; save config to nvmem
07EF 22         585       ret
07F0 B40206     586       delem2: cjne a, #2, delem3
07F3 1548       587       dec reflow_temp
07F5 1206DF     588       lcall updateReflowScreen
07F8            589       ;lcall save_config                                   ; save config to nvmem
07F8 22         590       ret
07F9 B40306     591       delem3: cjne a, #3, delem4
07FC 1549       592       dec reflow_time
07FE 1206DF     593       lcall updateReflowScreen
0801            594       ;lcall save_config                                   ; save config to nvmem
0801 22         595       ret
0802 154A       596       delem4: dec cool_temp
0804 12075A     597       lcall updateCoolScreen
0807            598       ;lcall save_config                                   ; save config to nvmem
0807 22         599       ret
0808            600   
0808            601   DONT_DEC: 
0808 22         602       ret
0809            603   
0809            604   SendToLCD: ;check slides from prof jesus
0809 75F064     605       mov b, #100
080C 84         606       div ab
080D 4430       607       orl a, #0x30 ; Convert hundreds to ASCII
080F 120304     608       lcall ?WriteData ; Send to LCD
0812 E5F0       609       mov a, b ; Remainder is in register b
0814 75F00A     610       mov b, #10
0817 84         611       div ab
0818 4430       612       orl a, #0x30 ; Convert tens to ASCII
081A 120304     613       lcall ?WriteData; Send to LCD
081D E5F0       614       mov a, b
081F 4430       615       orl a, #0x30 ; Convert units to ASCII
0821 120304     616       lcall ?WriteData; Send to LCD
0824 22         617       ret
0825            618   ;-------------------------------------------------------------------------------
0825            619   
0825            620   ;-----------------------------------FSM & PWM----------------------------------------
0825            621   
0825            622   reset:
0825 20A613     623            jb RST, DONT_RESET                              ; if 'RESET' is pressed, wait for rebouce
0828 C002       624            push AR2
082A 7A32       624            mov R2, #50
082C 1202BF     624            lcall ?Wait_Milli_Seconds
082F D002       624            pop AR2                         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0831 20A607     625            jb RST, DONT_RESET                              ; if the 'RESET' button is not pressed skip
0834 30A6FD     626            jnb RST, $
0837 7405       627            mov a, #5                                               ; reset to state 5 when reset for safety
0839 F545       628            mov state, a
083B            629   DONT_RESET: 
083B 22         630       ret  
083C            631   
083C            632   start_or_not:
083C 20C511     633            jb START_STOP, DONT_START               ; if 'RESET' is pressed, wait for rebouce
083F C002       634            push AR2
0841 7A32       634            mov R2, #50
0843 1202BF     634            lcall ?Wait_Milli_Seconds
0846 D002       634            pop AR2                         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0848 20C505     635            jb START_STOP, DONT_START               ; if the 'RESET' button is not pressed skip
084B 30C5FD     636            jnb START_STOP, $
084E B201       637            cpl start_flag
0850            638   DONT_START: 
0850 22         639       ret  
0851            640   
0851            641   PWM_OUTPUT:
0851 E54B       642            mov a, pwm
0853 B46409     643            cjne a, #100, holding_temp              ; if pwm is 100, then OUTPUT = 1 all 
0856 D282       644            setb OUTPUT                                             ; the time
0858 22         645            ret
0859            646   
0859 B40003     647            cjne a, #0, holding_temp                ; if pwm is 0, then OUTPUT = 0 all
085C C282       648            clr OUTPUT                                              ; the time
085E 22         649            ret
085F            650   
085F            651            holding_temp:   
085F E53F       652            mov a, Count1ms
0861 B4000E     653            cjne a, #0 , Not_yet                    ; check whether it is time to turn on the pwm pin                
0864 C282       654            clr OUTPUT                                              ; clr OUTPUT if at the begining of the period
0866 E53F       655            mov a, Count1ms+0
0868 B42007     656            cjne a, #low(PWM_HOLD_RATE), Not_yet    ; Warning: this instruction changes the carry flag!
086B E540       657            mov a, Count1ms+1
086D B40302     658            cjne a, #high(PWM_HOLD_RATE), Not_yet   ; if Count1ms = PWM_HOLD_RATE, set the OUTPUT to 1
0870 D282       659            setb OUTPUT
0872 22         660   Not_yet: ret
0873            661   
0873            662   Load_Defaults: ; Load defaults if 'keys' are incorrect
0873 754623     663            mov soak_temp, #35                              ; 150
0876 75470A     664            mov soak_time, #10                              ; 45
0879 754832     665            mov reflow_temp, #50                    ; 225
087C 754905     666            mov reflow_time, #5                             ; 30
087F 754A1E     667       mov cool_temp, #30                           ; 50
0882 22         668            ret
0883            669   
0883            670   ;-------------------------------------FSM time!!---------------------------------------
0883            671   FSM:                                                      
0883 E545       672            mov a, state
0885            673   state0:                                                  ; default state
0885 B40011     674            cjne a, #0, state1                      ; if not state 0, then go to next branch
0888 754B00     675            mov pwm, #0                                     ; at state 0, pwm is 0%
088B 12083C     676            lcall start_or_not
088E 300105     677            jnb start_flag, state0_done     ; if start key is not press, the go to state0_done
0891 754501     678            mov state, #1
0894 C201       679            clr start_flag
0896            680   state0_done:
0896 0204A5     681            ljmp forever
0899            682   state1:                                                  ; ramp to soak
0899 B40115     683            cjne a, #1, state2
089C 754B64     684            mov pwm, #100
089F 754C00     685            mov sec, #0
08A2 E546       686            mov a, soak_temp
08A4 C3         687            clr c
08A5 954D       688            subb a, temp                            ; if temp > soak_temp, c = 1
08A7 5005       689            jnc state1_done                                 ; if temp is not at soak temp, then go to state1_done
08A9 754502     690            mov state, #2
08AC D201       691            setb start_flag
08AE            692   state1_done:
08AE 0204A5     693            ljmp forever
08B1            694   
08B1            695   state2:                                                  ; soak/preheat
08B1 B40210     696            cjne a, #2, state3
08B4 754B14     697            mov pwm, #HOLD_PWM
08B7 E547       698            mov a, soak_time
08B9 C3         699            clr c
08BA 954C       700            subb a, sec                                     ; if sec > soak time, c = 1
08BC 5003       701            jnc state2_done                                 ; if sec is not at soak time, then go to state2_done 
08BE 754503     702            mov state, #3   
08C1            703   state2_done:
08C1 0204A5     704            ljmp forever
08C4            705   
08C4            706   state3:                                                  ; ramp to peak, prepare to reflow
08C4 B40313     707            cjne a, #3, state4
08C7 754B64     708            mov pwm, #100
08CA 754C00     709            mov sec, #0
08CD E548       710            mov a, reflow_temp
08CF C3         711            clr c
08D0 954D       712            subb a, temp                            ; if temp > reflow_temp, c = 1
08D2 5003       713            jnc state3_done                                 ; if temp is not at reflow_temp, then go to state3_done 
08D4 754504     714            mov state, #4   
08D7            715   state3_done:
08D7 0204A5     716            ljmp forever
08DA            717   
08DA            718   state4:                                                  ; ramp to peak, prepare to reflow
08DA B40410     719            cjne a, #4, state5
08DD 754B14     720            mov pwm, #HOLD_PWM
08E0 E549       721            mov a, reflow_time
08E2 C3         722            clr c
08E3 954C       723            subb a, sec                                     ; if sec > reflow_temp, c = 1
08E5 5003       724            jnc state4_done                                 ; if sec is not at reflow time, then go to state4_done 
08E7 754505     725            mov state, #5   
08EA            726   state4_done:
08EA 0204A5     727            ljmp forever
08ED            728   
08ED            729   state5:                                                  ; cooling state
08ED B40595     730            cjne a, #5, state0
08F0 754B00     731            mov pwm, #0
08F3 E54D       732            mov a, temp
08F5 C3         733            clr c
08F6 954A       734            subb a, cool_temp                       ; if cool_temp > temp, c = 1
08F8 5003       735            jnc state5_done                                 ; if temp is not at cool_temp, then go to state5_done 
08FA 754500     736            mov state, #0   
08FD            737   state5_done:
08FD 0204A5     738            ljmp forever 
0900            739   ;----------------------------------------------------------------------------------------
0900            740   
0900            741   ;---------------------------------save to nvmem-------------------------------
0900            742   save_config:
0900 C0A8       743       push IE ; Save the current state of bit EA in the stack
0902 C2AF       744       clr EA ; Disable interrupts
0904 75D108     745            mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
0907 907F80     746            mov dptr, #0x7f80 ; Last page of flash memory
090A            747            ; Save variables
090A E546       748            mov a, soak_temp
090C F0         748            movx @dptr, a
090D A3         748            inc dptr ; @0x7f80
090E E547       749            mov a, soak_time
0910 F0         749            movx @dptr, a
0911 A3         749            inc dptr ; @0x7f81
0912 E548       750            mov a, reflow_temp
0914 F0         750            movx @dptr, a
0915 A3         750            inc dptr ; @0x7f82
0916 E549       751            mov a, reflow_time
0918 F0         751            movx @dptr, a
0919 A3         751            inc dptr ; @0x7f83
091A E54A       752            mov a, cool_temp
091C F0         752            movx @dptr, a
091D A3         752            inc dptr ; @0x7f84
091E 7455       753            mov a, #0x55
0920 F0         753            movx @dptr, a
0921 A3         753            inc dptr ; First key value @0x7f84
0922 74AA       754            mov a, #0xAA
0924 F0         754            movx @dptr, a
0925 A3         754            inc dptr ; Second key value @0x7f85
0926 75D100     755            mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0929 43D240     756            orl EECON, #0b01000000 ; Enable auto-erase on next write sequence
092C 75D150     757            mov FCON, #0x50 ; Write trigger first byte
092F 75D1A0     758            mov FCON, #0xA0 ; Write trigger second byte
0932            759            ; CPU idles until writing of flash completes.
0932 75D100     760            mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0935 53D2BF     761            anl EECON, #0b10111111 ; Disable auto-erase
0938 D0A8       762            pop IE ; Restore the state of bit EA from the stack
093A 22         763       ret
093B            764   ;-----------------------------------------------------------------------------
093B            765   
093B            766   ;------------------------------read from nvmem--------------------------------
093B            767   Load_Configuration:
093B 907F84     768       mov dptr, #0x7f84 ; First key value location.
093E E4         769       clr a
093F 93         769       movc a, @a+dptr
0940 F8         769       mov R0, a
0941 A3         769       inc dptr ; 0x7f84 should contain 0x55
0942 B85524     770       cjne R0, #0x55, jumpToLoadDef
0945 E4         771       clr a
0946 93         771       movc a, @a+dptr
0947 F8         771       mov R0, a
0948 A3         771       inc dptr ; 0x7f85 should contain 0xAA
0949 B8AA1D     772       cjne R0, #0xAA, jumpToLoadDef
094C            773   ; Keys are good. Get stored values.
094C 907F80     774       mov dptr, #0x7f80
094F E4         775       clr a
0950 93         775       movc a, @a+dptr
0951 F546       775       mov soak_temp, a
0953 A3         775       inc dptr ; 0x7f80
0954 E4         776       clr a
0955 93         776       movc a, @a+dptr
0956 F547       776       mov soak_time, a
0958 A3         776       inc dptr ; 0x7f81
0959 E4         777       clr a
095A 93         777       movc a, @a+dptr
095B F548       777       mov reflow_temp, a
095D A3         777       inc dptr ; 0x7f82
095E E4         778       clr a
095F 93         778       movc a, @a+dptr
0960 F549       778       mov reflow_time, a
0962 A3         778       inc dptr ; 0x7f83
0963 E4         779       clr a
0964 93         779       movc a, @a+dptr
0965 F54A       779       mov cool_temp, a
0967 A3         779       inc dptr
0968 22         780       ret
0969            781   jumpToLoadDef:
0969 020873     782            ljmp Load_Defaults
096C            783   ;----------------------------------------------------------------------------
096C            784   
096C            785   ;----------------------------------------------------------------------
096C            786   cold_junc:
096C            787   
096C 22         788   ret
096D            789   ;----------------------------------------------------------------------
096D            790   
096D            791   
096D            792   ;----------------------------------------------------------------------
096D            793   hot_junc:
096D            794   
096D 22         795   ret
096E            796   ;----------------------------------------------------------------------
096E            797   
096E            798   END
