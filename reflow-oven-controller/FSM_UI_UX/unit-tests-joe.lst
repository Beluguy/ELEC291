                 -1   $MODLP51RC2
0000              1   ;--------------------------------------------------------
0000              2   ; Register and bit definitions for the AT89LP51RC2/RB2
0000              3   ;--------------------------------------------------------
0000              4   ; Special Function Registers
0000              5   ;--------------------------------------------------------
0000              6   ACC            DATA 0xe0
0000              7   B              DATA 0xf0
0000              8   PSW            DATA 0xd0
0000              9   SP             DATA 0x81
0000             10   SPX            DATA 0xef
0000             11   DPL            DATA 0x82
0000             12   DPH            DATA 0x83
0000             13   DPLB           DATA 0xd4
0000             14   DPHB           DATA 0xd5
0000             15   PAGE           DATA 0xf6
0000             16   AX             DATA 0xe1
0000             17   BX             DATA 0xf7
0000             18   DSPR           DATA 0xe2
0000             19   FIRD           DATA 0xe3
0000             20   MACL           DATA 0xe4
0000             21   MACH           DATA 0xe5
0000             22   PCON           DATA 0x87
0000             23   AUXR           DATA 0x8e
0000             24   AUXR1          DATA 0xa2
0000             25   DPCF           DATA 0xa1
0000             26   CKRL           DATA 0x97
0000             27   CKCKON0        DATA 0x8f
0000             28   CKCKON1        DATA 0xaf
0000             29   CKSEL          DATA 0x85
0000             30   CLKREG         DATA 0xae
0000             31   OSCCON         DATA 0x86
0000             32   IE             DATA 0xa8
0000             33   IEN0           DATA 0xa8
0000             34   IEN1           DATA 0xb1
0000             35   IPH0           DATA 0xb7
0000             36   IP             DATA 0xb8
0000             37   IPL0           DATA 0xb8
0000             38   IPH1           DATA 0xb3
0000             39   IPL1           DATA 0xb2
0000             40   P0             DATA 0x80
0000             41   P1             DATA 0x90
0000             42   P2             DATA 0xa0
0000             43   P3             DATA 0xb0
0000             44   P4             DATA 0xc0
0000             45   P0M0           DATA 0xe6
0000             46   P0M1           DATA 0xe7
0000             47   P1M0           DATA 0xd6
0000             48   P1M1           DATA 0xd7
0000             49   P2M0           DATA 0xce
0000             50   P2M1           DATA 0xcf
0000             51   P3M0           DATA 0xc6
0000             52   P3M1           DATA 0xc7
0000             53   P4M0           DATA 0xbe
0000             54   P4M1           DATA 0xbf
0000             55   SCON           DATA 0x98
0000             56   SBUF           DATA 0x99
0000             57   SADEN          DATA 0xb9
0000             58   SADDR          DATA 0xa9
0000             59   BDRCON         DATA 0x9b
0000             60   BRL            DATA 0x9a
0000             61   TCON           DATA 0x88
0000             62   TMOD           DATA 0x89
0000             63   TCONB          DATA 0x91
0000             64   TL0            DATA 0x8a
0000             65   TH0            DATA 0x8c
0000             66   TL1            DATA 0x8b
0000             67   TH1            DATA 0x8d
0000             68   RL0            DATA 0xf2
0000             69   RL1            DATA 0xf3
0000             70   RH0            DATA 0xf4
0000             71   RH1            DATA 0xf5
0000             72   WDTRST         DATA 0xa6
0000             73   WDTPRG         DATA 0xa7
0000             74   T2CON          DATA 0xc8
0000             75   T2MOD          DATA 0xc9
0000             76   RCAP2H         DATA 0xcb
0000             77   RCAP2L         DATA 0xca
0000             78   TH2            DATA 0xcd
0000             79   TL2            DATA 0xcc
0000             80   SPCON          DATA 0xc3
0000             81   SPSTA          DATA 0xc4
0000             82   SPDAT          DATA 0xc5
0000             83   SSCON          DATA 0x93
0000             84   SSCS           DATA 0x94
0000             85   SSDAT          DATA 0x95
0000             86   SSADR          DATA 0x96
0000             87   KBLS           DATA 0x9c
0000             88   KBE            DATA 0x9d
0000             89   KBF            DATA 0x9e
0000             90   KBMOD          DATA 0x9f
0000             91   BMSEL          DATA 0x92
0000             92   FCON           DATA 0xd1
0000             93   EECON          DATA 0xd2
0000             94   ACSRA          DATA 0xa3
0000             95   ACSRB          DATA 0xab
0000             96   AREF           DATA 0xbd
0000             97   DADC           DATA 0xa4
0000             98   DADI           DATA 0xa5
0000             99   DADL           DATA 0xac
0000            100   DADH           DATA 0xad
0000            101   CCON           DATA 0xd8
0000            102   CMOD           DATA 0xd9
0000            103   CL             DATA 0xe9
0000            104   CH             DATA 0xf9
0000            105   CCAPM0         DATA 0xda
0000            106   CCAPM1         DATA 0xdb
0000            107   CCAPM2         DATA 0xdc
0000            108   CCAPM3         DATA 0xdd
0000            109   CCAPM4         DATA 0xde
0000            110   CCAP0H         DATA 0xfa
0000            111   CCAP1H         DATA 0xfb
0000            112   CCAP2H         DATA 0xfc
0000            113   CCAP3H         DATA 0xfd
0000            114   CCAP4H         DATA 0xfe
0000            115   CCAP0L         DATA 0xea
0000            116   CCAP1L         DATA 0xeb
0000            117   CCAP2L         DATA 0xec
0000            118   CCAP3L         DATA 0xed
0000            119   CCAP4L         DATA 0xee
0000            120   ;--------------------------------------------------------
0000            121   ; special function bits
0000            122   ;--------------------------------------------------------
0000            123   P              BIT 0xd0
0000            124   F1             BIT 0xd1
0000            125   OV             BIT 0xd2
0000            126   RS0            BIT 0xd3
0000            127   RS1            BIT 0xd4
0000            128   F0             BIT 0xd5
0000            129   AC             BIT 0xd6
0000            130   CY             BIT 0xd7
0000            131   EX0            BIT 0xa8
0000            132   ET0            BIT 0xa9
0000            133   EX1            BIT 0xaa
0000            134   ET1            BIT 0xab
0000            135   ES             BIT 0xac
0000            136   ET2            BIT 0xad
0000            137   EC             BIT 0xae
0000            138   EA             BIT 0xaf
0000            139   PX0            BIT 0xb8
0000            140   PT0            BIT 0xb9
0000            141   PX1            BIT 0xba
0000            142   PT1            BIT 0xbb
0000            143   PS             BIT 0xbc
0000            144   PT2            BIT 0xbd
0000            145   IP0D           BIT 0xbf
0000            146   PPCL           BIT 0xbe
0000            147   PT2L           BIT 0xbd
0000            148   PLS            BIT 0xbc
0000            149   PT1L           BIT 0xbb
0000            150   PX1L           BIT 0xba
0000            151   PT0L           BIT 0xb9
0000            152   PX0L           BIT 0xb8
0000            153   RXD            BIT 0xb0
0000            154   TXD            BIT 0xb1
0000            155   INT0           BIT 0xb2
0000            156   INT1           BIT 0xb3
0000            157   T0             BIT 0xb4
0000            158   T1             BIT 0xb5
0000            159   WR             BIT 0xb6
0000            160   RD             BIT 0xb7
0000            161   RI             BIT 0x98
0000            162   TI             BIT 0x99
0000            163   RB8            BIT 0x9a
0000            164   TB8            BIT 0x9b
0000            165   REN            BIT 0x9c
0000            166   SM2            BIT 0x9d
0000            167   SM1            BIT 0x9e
0000            168   SM0            BIT 0x9f
0000            169   IT0            BIT 0x88
0000            170   IE0            BIT 0x89
0000            171   IT1            BIT 0x8a
0000            172   IE1            BIT 0x8b
0000            173   TR0            BIT 0x8c
0000            174   TF0            BIT 0x8d
0000            175   TR1            BIT 0x8e
0000            176   TF1            BIT 0x8f
0000            177   CP_RL2         BIT 0xc8
0000            178   C_T2           BIT 0xc9
0000            179   TR2            BIT 0xca
0000            180   EXEN2          BIT 0xcb
0000            181   TCLK           BIT 0xcc
0000            182   RCLK           BIT 0xcd
0000            183   EXF2           BIT 0xce
0000            184   TF2            BIT 0xcf
0000            185   CF             BIT 0xdf
0000            186   CR             BIT 0xde
0000            187   CCF4           BIT 0xdc
0000            188   CCF3           BIT 0xdb
0000            189   CCF2           BIT 0xda
0000            190   CCF1           BIT 0xd9
0000            191   CCF0           BIT 0xd8
0000              2   org 0000H
0000 02047C       3      ljmp MainProgram
0003              4   
0003              5   ; Timer/Counter 0 overflow interrupt vector
000B              6   org 0x000B
000B 0203EE       7            ljmp Timer0_ISR
000E              8   
000E              9   ; Timer/Counter 2 overflow interrupt vector
002B             10   org 0x002B
002B 020414      11            ljmp Timer2_ISR
002E             12   
002E             13   CLK                              EQU 22118400
002E             14   BAUD                             EQU 115200
002E             15   BRG_VAL                          EQU (0x100-(CLK/(16*BAUD)))
002E             16   TIMER0_RATE              EQU 1000    ; 1000Hz PWM output signal 
002E             17   TIMER0_RELOAD            EQU ((65536-(CLK/TIMER0_RATE)))
002E             18   TIMER2_RATE              EQU 1000     ; 1000Hz, for a timer tick of 1ms
002E             19   TIMER2_RELOAD            EQU ((65536-(CLK/TIMER2_RATE)))
002E             20   
002E             21   HOLD_PWM                         EQU 20          ; 20% pwm for holding the temp constant 
002E             22   PWM_20                           EQU (TIMER0_RATE-(HOLD_PWM*10))
002E             23   
002E             24   ; These register definitions needed by 'math32.inc'
0030             25   DSEG at 30H
0030             26   x:                               ds 4
0034             27   y:                               ds 4
0038             28   bcd:                             ds 5
003D             29   Result:                          ds 2
003F             30   
003F             31   ;--------------------for clock----------------------
003F             32   Count1ms:                ds 2 ; Used to determine when one second has passed
0041             33   secs_ctr:                ds 1
0042             34   mins_ctr:                ds 1
0043             35   pwm_time:                        ds 1 ; Used to check whether it is time to turn on the pwm output
0044             36   ;---------------------------------------------------
0044             37   
0044             38   ;--------------------for settings-------------------
0044             39   edit_sett:               ds 1 ; which segment are we editing 
0045             40   ; 0 - soak temp
0045             41   ; 1 - soak time
0045             42   ; 2 - reflow temp
0045             43   ; 3 - reflow time
0045             44   ; 4 - cool temp
0045             45   
0045             46   ;---------------------------------------------------
0045             47   
0045             48   ;--------------------for FSM------------------------
0045             49   state:                           ds 1                            
0046             50   soak_temp:                       ds 1
0047             51   soak_time:                       ds 1
0048             52   reflow_temp:             ds 1
0049             53   reflow_time:             ds 1
004A             54   pwm:                             ds 1
004B             55   sec:                             ds 1
004C             56   cool_temp:                       ds 1
004D             57   temp:                            ds 1
004E             58   ;---------------------------------------------------
004E             59   
0000             60   BSEG
0000             61   mf:                              dbit 1 ; flag for math32
0001             62   start_flag:              dbit 1
0002             63   one_second_flag:         dbit 1 ; Set to one in the ISR every time 1000 ms had passed
0003             64   safety_overheat:    dbit 1 ; for overheat safety feature
0004             65   
0004             66   
002E             67   CSEG
002E             68   
                546   $LIST
                 71   $LIST
02B4             73   
02B4             74   ; These 'equ' must match the hardware wiring
02B4             75   ; They are used by 'LCD_4bit.inc'
02B4             76   LCD_RS                   EQU P3.2
02B4             77   ; LCD_RW equ Px.x ; Always grounded
02B4             78   LCD_E                    EQU P3.3
02B4             79   LCD_D4                   EQU P3.4
02B4             80   LCD_D5                   EQU P3.5
02B4             81   LCD_D6                   EQU P3.6
02B4             82   LCD_D7                   EQU P3.7
02B4             83   ; These ’EQU’ must match the wiring between the microcontroller and ADC 
02B4             84   CE_ADC                   EQU P2.0 
02B4             85   MY_MOSI_ADC          EQU P2.1 
02B4             86   MY_MISO_ADC      EQU P2.2 
02B4             87   MY_SCLK_ADC      EQU P2.3 
02B4             88   
02B4             89   SOUND_OUT        EQU P1.1
02B4             90   RST                              EQU     P4.5    ; button to reset
02B4             91   EDIT                     EQU P0.6        ; button for changing what to edit
02B4             92   INCR            EQU P0.3   ; button to increment current selection
02B4             93   DECR            EQU P0.0   ; button to increment current selection
02B4             94   START_STOP               EQU P2.4        ; button to start/stop reflow
02B4             95   OUTPUT                   EQU P   ; output signal to the relay box
02B4             96   
02B4             97   ; i have buttons on 2.4, 4.5, 0.6, 0.3, 0.0 (left to right)
02B4             98   
                100   	$LIST
0360            102   
0360            103   ;------------------UI-UX vars---------------------
0360            104   ;            1234567890123456
0360 736F616B   105   setup1:  db 'soak            ', 0
     20202020
     20202020
     20202020
     00
0371 746D703A   106   setup2:  db 'tmp:XXX time:XXX', 0
     58585820
     74696D65
     3A585858
     00
0382 7265666C   107   setup3:  db 'refl            ', 0
     20202020
     20202020
     20202020
     00
0393 636F6F6C   108   setup4:  db 'cool *          ', 0
     202A2020
     20202020
     20202020
     00
03A4 746D703A   109   setup5:  db 'tmp:XXX         ', 0
     58585820
     20202020
     20202020
     00
03B5            110   
03B5 74656D70   111   run1:    db 'temp:XXX state X', 0
     3A585858
     20737461
     74652058
     00
03C6 656C6170   112   run2:    db 'elapsed XX:XX   ', 0
     73656420
     58583A58
     58202020
     00
03D7            113   
03D7            114   Timer0_Init:
03D7 E589       115            mov a, TMOD
03D9 54F0       116            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
03DB 4401       117            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
03DD F589       118            mov TMOD, a
03DF 758CA9     119            mov TH0, #high(TIMER0_RELOAD)
03E2 758A9A     120            mov TL0, #low(TIMER0_RELOAD)
03E5            121            ; Set autoreload value
03E5 75F4A9     122            mov RH0, #high(TIMER0_RELOAD)
03E8 75F29A     123            mov RL0, #low(TIMER0_RELOAD)
03EB            124            ; Enable the timer and interrupts
03EB D2A9       125       setb ET0  ; Enable timer 0 interrupt
03ED            126       ; setb TR0  ; Start timer 0
03ED 22         127            ret
03EE            128   
03EE            129   ;---------------------------------;
03EE            130   ; ISR for timer 0.  Set to execute;
03EE            131   ; every 1/4096Hz to generate a    ;
03EE            132   ; 2048 Hz square wave at pin P1.1 ;
03EE            133   ;---------------------------------;
03EE            134   Timer0_ISR:
03EE            135            ;clr TF0  ; According to the data sheet this is done for us already.
03EE 758CA9     136            mov TH0, #high(TIMER0_RELOAD)
03F1 758A9A     137            mov TL0, #low(TIMER0_RELOAD)
03F4            138            ; Set autoreload value
03F4 75F4A9     139            mov RH0, #high(TIMER0_RELOAD)
03F7 75F29A     140            mov RL0, #low(TIMER0_RELOAD)
03FA 32         141            reti
03FB            142   
03FB            143   ;---------------------------------;
03FB            144   ; Routine to initialize the ISR   ;
03FB            145   ; for timer 2                     ;
03FB            146   ;---------------------------------;
03FB            147   Timer2_Init:
03FB 75C800     148            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
03FE 75CDA9     149            mov TH2, #high(TIMER2_RELOAD)
0401 75CC9A     150            mov TL2, #low(TIMER2_RELOAD)
0404            151            ; Set the reload value
0404 75CBA9     152            mov RCAP2H, #high(TIMER2_RELOAD)
0407 75CA9A     153            mov RCAP2L, #low(TIMER2_RELOAD)
040A            154            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
040A E4         155            clr a
040B F53F       156            mov Count1ms+0, a
040D F540       157            mov Count1ms+1, a
040F            158            ; Enable the timer and interrupts
040F D2AD       159       setb ET2  ; Enable timer 2 interrupt
0411 D2CA       160       setb TR2  ; Enable timer 2
0413 22         161            ret
0414            162   
0414            163   ;---------------------------------;
0414            164   ; ISR for timer 2                 ;
0414            165   ;---------------------------------;
0414            166   Timer2_ISR:
0414 C2CF       167            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0416 B290       168            cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0418            169            
0418            170            ; The two registers used in the ISR must be saved in the stack
0418 C0E0       171            push acc
041A C0D0       172            push psw
041C            173            
041C            174            ; Increment the 16-bit one mili second counter
041C 053F       175            inc Count1ms+0    ; Increment the low 8-bits first
041E E53F       176            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0420 7002       177            jnz Inc_Done
0422 0540       178            inc Count1ms+1
0424            179   
0424            180   Inc_Done:
0424            181            ; Check if second has passed
0424 E53F       182            mov a, Count1ms+0
0426 B4E831     183            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
0429 E540       184            mov a, Count1ms+1
042B B4032C     185            cjne a, #high(1000), Timer2_ISR_done
042E            186            
042E            187            ; 1000 milliseconds have passed.  Set a flag so the main program knows
042E D202       188            setb one_second_flag ; Let the main program know second had passed
0430            189                    
0430            190            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0430 E4         191            clr a
0431 F53F       192            mov Count1ms+0, a
0433 F540       193            mov Count1ms+1, a
0435            194            
0435            195            ; reset secs_ctr if hits 60, increment 1 to minutes
0435            196            ; Increment the seconds counter
0435 E541       197            mov a, secs_ctr
0437 B45910     198            cjne a, #0x59, Timer2_ISR_increment_s
043A E4         199            clr a
043B D4         200            da a ; Decimal adjust instruction.  Check datasheet for more details!
043C F541       201            mov secs_ctr, a
043E            202            
043E            203            ; increment the minutes counter
043E E542       204            mov a, mins_ctr
0440 B4590F     205            cjne a, #0x59, Timer2_ISR_increment_m
0443 E4         206            clr a
0444 D4         207            da a
0445 F542       208            mov mins_ctr, a
0447            209   
0447 02045A     210            ljmp Timer2_ISR_done
044A            211            
044A            212   Timer2_ISR_increment_s:
044A 2401       213            add a, #0x01
044C D4         214            da a ; Decimal adjust instruction.  Check datasheet for more details!
044D F541       215            mov secs_ctr, a
044F 02045A     216            ljmp Timer2_ISR_done
0452            217   Timer2_ISR_increment_m:
0452 2401       218            add a, #0x01
0454 D4         219            da a ; Decimal adjust instruction.  Check datasheet for more details!
0455 F542       220            mov mins_ctr, a
0457 02045A     221            ljmp Timer2_ISR_done
045A            222   Timer2_ISR_done:
045A D0D0       223            pop psw
045C D0E0       224            pop acc
045E 32         225            reti
045F            226   
045F            227   ; Configure the serial port and baud rate
045F            228   InitSerialPort:
045F            229       ; Since the reset button bounces, we need to wait a bit before
045F            230       ; sending messages, otherwise we risk displaying gibberish!
045F 79DE       231            mov R1, #222
0461 78A6       232       mov R0, #166
0463 D8FE       233       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0465 D9FA       234       djnz R1, $-4 ; 22.51519us*222=4.998ms
0467            235       ; Now we can proceed with the configuration
0467 438780     236            orl     PCON,#0x80
046A 759852     237            mov     SCON,#0x52
046D 759B00     238            mov     BDRCON,#0x00
0470 759AF4     239            mov     BRL,#BRG_VAL
0473 759B1E     240            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
0476 22         241       ret
0477            242       
0477            243   INIT_SPI: 
0477 D2A2       244            setb MY_MISO_ADC ; Make MISO an input pin
0479 C2A3       245            clr MY_SCLK_ADC ; For mode (0,0) SCLK is zero
047B 22         246            ret
047C            247   
047C            248   ; -------------------------------------------------- MAIN PROGRAM LOOP ----------------------------------------------
047C            249   
047C            250   MainProgram: ; setup()
047C 75817F     251       mov SP, #7FH                                                 ; Set the stack pointer to the begining of idata
047F            252       
047F C2D0       253            clr OUTPUT                                                      ; pwm is set to low by default
0481 120A47     254            lcall Load_Configuration ; initialize settings
0484 12045F     255       lcall InitSerialPort
0487 120477     256       lcall INIT_SPI
048A 12030E     257       lcall LCD_4BIT
048D            258   
048D            259       ;initialize flags
048D 750100     260       mov start_flag, #0
0490 750300     261       mov safety_overheat, #0
0493            262   
0493            263       ;initialize fsm
0493 754500     264       mov state, #0
0496            265   
0496            266       ;init clock
0496 754100     267       mov secs_ctr, #0
0499 754200     268       mov mins_ctr, #0
049C            269       
049C 1203D7     270       lcall Timer0_Init
049F 1203FB     271       lcall Timer2_Init
04A2 D2AF       272       setb EA                                                      ; Enable Global interrupts
04A4            273   
04A4            274   forever: ;loop() please only place function calls into the loop!
04A4 300205     275       jnb one_second_flag, skipDisplay     ; this segment only executes once a second
04A7 C202       276       clr one_second_flag
04A9 120573     277       lcall generateDisplay
04AC            278       ;lcall readADC                                               ; reads ch0 and saves result to Result as 2 byte binary
04AC            279       ;lcall Do_Something_With_Result ; convert to bcd and send to serial
04AC            280       ;lcall checkOverheat
04AC            281       skipDisplay:                                                 ; end segment
04AC            282   
04AC 200106     283       jb start_flag, skipPoll
04AF 12082F     284       lcall pollButtons                                    ; poll buttons for editing screen
04B2 0204A4     285       ljmp forever
04B5            286       skipPoll: 
04B5            287   
04B5            288       ;lcall reset                                                 ; check if reset is pressed
04B5            289       ;ljmp FSM                                                    ; finite state machine logic
04B5 0204A4     290            ljmp forever
04B8            291   
04B8            292   ; ---------------------------------------------------------------------------------------------------
04B8            293   
04B8            294   ;----------------------------------safety-features---------------------------------------------------
04B8            295   checkOverheat:
04B8 E54D       296       mov a, temp
04BA C3         297            clr c
04BB 94FB       298            subb a, #251                            ; if 251 > temp, c = 1
04BD 4006       299            jc notOverheat                          ; return if notOverheating
04BF 200306     300       jb safety_overheat, overheatReset ; check if flag is set, if set that means has been overheating for prolonged time
04C2 D203       301            setb safety_overheat        ; set overheat flag for next time
04C4 22         302       ret
04C5            303   notOverheat:
04C5 C203       304       clr safety_overheat
04C7 22         305            ret
04C8            306   overheatReset:
04C8 C203       307       clr safety_overheat
04CA 7405       308       mov a, #5                                            ; reset to state 5 when reset for safety
04CC 22         309       ret
04CD            310   ;----------------------------------------------------------------------------------------------------
04CD            311   
04CD            312   readADC:
04CD C2A0       313       clr CE_ADC
04CF 7801       314            mov R0, #00000001B ; Start bit:1
04D1 120534     315            lcall DO_SPI_G
04D4 7880       316            mov R0, #10000000B ; Single ended, read channel 0
04D6 120534     317            lcall DO_SPI_G
04D9 E9         318            mov a, R1 ; R1 contains bits 8 and 9
04DA 5403       319            anl a, #00000011B ; We need only the two least significant bits
04DC F53E       320            mov Result+1, a ; Save result high.
04DE 7855       321            mov R0, #55H ; It doesn't matter what we transmit...
04E0 120534     322            lcall DO_SPI_G
04E3 893D       323            mov Result, R1 ; R1 contains bits 0 to 7. Save result low.
04E5 D2A0       324            setb CE_ADC
04E7 22         325       ret
04E8            326   
04E8            327   Do_Something_With_Result:
04E8 853D30     328            mov x+0, result+0
04EB 853E31     329            mov x+1, result+1
04EE 753200     330            mov x+2, #0
04F1 753300     331            mov x+3, #0
04F4            332            
04F4 75349A     333            mov y+0, #low (410 % 0x10000) 
04F7 753501     333            mov y+1, #high(410 % 0x10000) 
04FA 753600     333            mov y+2, #low (410 / 0x10000) 
04FD 753700     333            mov y+3, #high(410 / 0x10000) 
0500 1201A8     334            lcall mul32
0503            335            
0503 7534FF     336            mov y+0, #low (1023 % 0x10000) 
0506 753503     336            mov y+1, #high(1023 % 0x10000) 
0509 753600     336            mov y+2, #low (1023 / 0x10000) 
050C 753700     336            mov y+3, #high(1023 / 0x10000) 
050F 120235     337            lcall div32
0512            338            
0512 753411     339            mov y+0, #low (273 % 0x10000) 
0515 753501     339            mov y+1, #high(273 % 0x10000) 
0518 753600     339            mov y+2, #low (273 / 0x10000) 
051B 753700     339            mov y+3, #high(273 / 0x10000) 
051E 120114     340            lcall sub32
0521            341            
0521 12002E     342            lcall hex2bcd
0524 12054D     343            lcall Send_3_digit_BCD
0527            344            
0527 E530       345            mov a, x
0529 B43200     346            cjne a, #50, NOT_EQ
052C 4003       347            NOT_EQ: JC REQ_LOW
052E D28C       348            setb TR0
0530 22         349            ret
0531            350            REQ_LOW:
0531 C28C       351            clr TR0
0533 22         352            ret
0534            353            
0534            354   DO_SPI_G: 
0534 C0E0       355            push acc 
0536 7900       356            mov R1, #0 ; Received byte stored in R1
0538 7A08       357            mov R2, #8 ; Loop counter (8-bits)
053A            358   DO_SPI_G_LOOP: 
053A E8         359            mov a, R0 ; Byte to write is in R0
053B 33         360            rlc a ; Carry flag has bit to write
053C F8         361            mov R0, a 
053D 92A1       362            mov MY_MOSI_ADC, c 
053F D2A3       363            setb MY_SCLK_ADC ; Transmit
0541 A2A2       364            mov c, MY_MISO_ADC ; Read received bit
0543 E9         365            mov a, R1 ; Save received bit in R1
0544 33         366            rlc a 
0545 F9         367            mov R1, a 
0546 C2A3       368            clr MY_SCLK_ADC 
0548 DAF0       369            djnz R2, DO_SPI_G_LOOP 
054A D0E0       370            pop acc 
054C 22         371            ret
054D            372            
054D            373   Send_3_Digit_BCD: ;send 3 digits bcd in BCD var to putty
054D E539       374       mov a, bcd+1
054F 540F       375       anl a, #0fh
0551 4430       376       orl a, #'0'
0553 F8         377       mov r0, a
0554 12056B     378       lcall putchar
0557 C000       379            push ar0
0559 A838       379            mov r0, bcd+0
055B 12029E     379            lcall ?Send_BCD
055E D000       379            pop ar0
0560 740D       380            mov a, #'\r'
0562 12056B     381            lcall putchar
0565 740A       382            mov a, #'\n'
0567 12056B     383            lcall putchar
056A 22         384            ret
056B            385   
056B            386   ; Send a character using the serial port
056B            387   putchar:
056B 3099FD     388       jnb TI, putchar
056E C299       389       clr TI
0570 F599       390       mov SBUF, a
0572 22         391       ret
0573            392   
0573            393   ;----------------------------------UI CODE----------------------------------------------
0573            394   generateDisplay:
0573 200103     395       jb start_flag, startDisplay
0576 02062F     396       ljmp setupDisplay
0579            397   
0579            398   startDisplay:
0579 C0E0       399            push acc
057B 7401       399            mov a, #1
057D 14         399            dec a
057E 120345     399            lcall ?Set_Cursor_1 ; Select column and row
0581 D0E0       399            pop acc
0583 C083       400            push dph
0585 C082       400            push dpl
0587 C0E0       400            push acc
0589 9003B5     400            mov dptr, #run1
058C 120338     400            lcall ?Send_Constant_String
058F D0E0       400            pop acc
0591 D082       400            pop dpl
0593 D083       400            pop dph
0595 C0E0       401            push acc
0597 7401       401            mov a, #1
0599 14         401            dec a
059A 120343     401            lcall ?Set_Cursor_2 ; Select column and row
059D D0E0       401            pop acc
059F C083       402            push dph
05A1 C082       402            push dpl
05A3 C0E0       402            push acc
05A5 9003C6     402            mov dptr, #run2
05A8 120338     402            lcall ?Send_Constant_String
05AB D0E0       402            pop acc
05AD D082       402            pop dpl
05AF D083       402            pop dph
05B1            403       
05B1 C0E0       404            push acc
05B3 7406       404            mov a, #6
05B5 14         404            dec a
05B6 120345     404            lcall ?Set_Cursor_1 ; Select column and row
05B9 D0E0       404            pop acc
05BB 753000     405            mov x+0, #low (0 % 0x10000) 
05BE 753100     405            mov x+1, #high(0 % 0x10000) 
05C1 753200     405            mov x+2, #low (0 / 0x10000) 
05C4 753300     405            mov x+3, #high(0 / 0x10000) 
05C7 854D30     406       mov x+0, temp
05CA 12002E     407       lcall hex2bcd
05CD            408       ; Display digit 3
05CD E539       409       mov a, bcd+1
05CF 540F       410       anl a, #0fh
05D1 4430       411       orl a, #'0'
05D3 F8         412       mov r0, a
05D4 E8         413            mov a, r0
05D5 120304     413            lcall ?WriteData
05D8 C000       414            push ar0
05DA A838       414            mov r0, bcd+0
05DC 12034A     414            lcall ?Display_BCD
05DF D000       414            pop ar0 ;display digit 2 and 1
05E1            415   
05E1 C0E0       416            push acc
05E3 7410       416            mov a, #16
05E5 14         416            dec a
05E6 120345     416            lcall ?Set_Cursor_1 ; Select column and row
05E9 D0E0       416            pop acc
05EB 753000     417            mov x+0, #low (0 % 0x10000) 
05EE 753100     417            mov x+1, #high(0 % 0x10000) 
05F1 753200     417            mov x+2, #low (0 / 0x10000) 
05F4 753300     417            mov x+3, #high(0 / 0x10000) 
05F7 854530     418       mov x+0, state
05FA 12002E     419       lcall hex2bcd
05FD            420       ; Display digit 1
05FD E538       421       mov a, bcd+0
05FF 540F       422       anl a, #0fh
0601 4430       423       orl a, #'0'
0603 F8         424       mov r0, a
0604 E8         425            mov a, r0
0605 120304     425            lcall ?WriteData
0608            426   
0608 C0E0       427            push acc
060A 7409       427            mov a, #9
060C 14         427            dec a
060D 120343     427            lcall ?Set_Cursor_2 ; Select column and row
0610 D0E0       427            pop acc
0612 C000       428            push ar0
0614 A842       428            mov r0, mins_ctr
0616 12034A     428            lcall ?Display_BCD
0619 D000       428            pop ar0
061B C0E0       429            push acc
061D 740C       429            mov a, #12
061F 14         429            dec a
0620 120343     429            lcall ?Set_Cursor_2 ; Select column and row
0623 D0E0       429            pop acc
0625 C000       430            push ar0
0627 A841       430            mov r0, secs_ctr
0629 12034A     430            lcall ?Display_BCD
062C D000       430            pop ar0
062E 22         431       ret
062F            432   
062F            433   ;             1234567890123456
062F            434   ;setup1:  db 'soak            ', 0
062F            435   ;setup2:  db 'tmp:XXX time:XXX', 0
062F            436   ;setup3:  db 'reflow          ', 0
062F            437   
062F            438   ;run1:    db 'temp:XXX state X', 0
062F            439   ;run2:    db 'elapsed XX:XX   ', 0
062F            440   
062F            441   setupDisplay:
062F E544       442       mov a, edit_sett
0631 B40003     443       cjne a, #0, checkScreen1
0634 02064C     444       ljmp soakScreen
0637            445   checkScreen1:
0637 B40103     446       cjne a, #1, checkScreen2
063A 02064C     447       ljmp soakScreen
063D            448   checkScreen2:
063D B40203     449       cjne a, #2, checkScreen3
0640 020709     450       ljmp reflowScreen
0643            451   checkScreen3:
0643 B40303     452       cjne a, #3, checkScreen4
0646 020709     453       ljmp reflowScreen
0649            454   checkScreen4:
0649 0207C6     455       ljmp coolScreen
064C            456   soakScreen:
064C C0E0       457            push acc
064E 7401       457            mov a, #1
0650 14         457            dec a
0651 120345     457            lcall ?Set_Cursor_1 ; Select column and row
0654 D0E0       457            pop acc
0656 C083       458            push dph
0658 C082       458            push dpl
065A C0E0       458            push acc
065C 900360     458            mov dptr, #setup1
065F 120338     458            lcall ?Send_Constant_String
0662 D0E0       458            pop acc
0664 D082       458            pop dpl
0666 D083       458            pop dph
0668 C0E0       459            push acc
066A 7401       459            mov a, #1
066C 14         459            dec a
066D 120343     459            lcall ?Set_Cursor_2 ; Select column and row
0670 D0E0       459            pop acc
0672 C083       460            push dph
0674 C082       460            push dpl
0676 C0E0       460            push acc
0678 900371     460            mov dptr, #setup2
067B 120338     460            lcall ?Send_Constant_String
067E D0E0       460            pop acc
0680 D082       460            pop dpl
0682 D083       460            pop dph
0684            461   
0684 C0E0       462            push acc
0686 7405       462            mov a, #5
0688 14         462            dec a
0689 120343     462            lcall ?Set_Cursor_2 ; Select column and row
068C D0E0       462            pop acc
068E 753000     463            mov x+0, #low (0 % 0x10000) 
0691 753100     463            mov x+1, #high(0 % 0x10000) 
0694 753200     463            mov x+2, #low (0 / 0x10000) 
0697 753300     463            mov x+3, #high(0 / 0x10000) 
069A 854630     464       mov x+0, soak_temp
069D 12002E     465       lcall hex2bcd
06A0            466       ; Display digit 3
06A0 E539       467       mov a, bcd+1
06A2 540F       468       anl a, #0fh
06A4 4430       469       orl a, #'0'
06A6 F8         470       mov r0, a
06A7 E8         471            mov a, r0
06A8 120304     471            lcall ?WriteData
06AB C000       472            push ar0
06AD A838       472            mov r0, bcd+0
06AF 12034A     472            lcall ?Display_BCD
06B2 D000       472            pop ar0
06B4            473   
06B4 C0E0       474            push acc
06B6 740E       474            mov a, #14
06B8 14         474            dec a
06B9 120343     474            lcall ?Set_Cursor_2 ; Select column and row
06BC D0E0       474            pop acc
06BE 753000     475            mov x+0, #low (0 % 0x10000) 
06C1 753100     475            mov x+1, #high(0 % 0x10000) 
06C4 753200     475            mov x+2, #low (0 / 0x10000) 
06C7 753300     475            mov x+3, #high(0 / 0x10000) 
06CA 854730     476       mov x+0, soak_time
06CD 12002E     477       lcall hex2bcd
06D0            478       ; Display digit 3
06D0 E539       479       mov a, bcd+1
06D2 540F       480       anl a, #0fh
06D4 4430       481       orl a, #'0'
06D6 F8         482       mov r0, a
06D7 E8         483            mov a, r0
06D8 120304     483            lcall ?WriteData
06DB C000       484            push ar0
06DD A838       484            mov r0, bcd+0
06DF 12034A     484            lcall ?Display_BCD
06E2 D000       484            pop ar0
06E4            485   
06E4 E544       486       mov a, edit_sett
06E6 B4000C     487       cjne a, #0, indic_soak_time
06E9 C0E0       488            push acc
06EB 7406       488            mov a, #6
06ED 14         488            dec a
06EE 120345     488            lcall ?Set_Cursor_1 ; Select column and row
06F1 D0E0       488            pop acc
06F3 800A       489       sjmp indic_soak_next
06F5            490   indic_soak_time:
06F5 C0E0       491            push acc
06F7 740F       491            mov a, #15
06F9 14         491            dec a
06FA 120345     491            lcall ?Set_Cursor_1 ; Select column and row
06FD D0E0       491            pop acc
06FF            492   indic_soak_next:
06FF C0E0       493            push acc
0701 742A       493            mov a, #'*'
0703 120304     493            lcall ?WriteData
0706 D0E0       493            pop acc
0708 22         494       ret
0709            495   reflowScreen:
0709 C0E0       496            push acc
070B 7401       496            mov a, #1
070D 14         496            dec a
070E 120345     496            lcall ?Set_Cursor_1 ; Select column and row
0711 D0E0       496            pop acc
0713 C083       497            push dph
0715 C082       497            push dpl
0717 C0E0       497            push acc
0719 900382     497            mov dptr, #setup3
071C 120338     497            lcall ?Send_Constant_String
071F D0E0       497            pop acc
0721 D082       497            pop dpl
0723 D083       497            pop dph
0725 C0E0       498            push acc
0727 7401       498            mov a, #1
0729 14         498            dec a
072A 120343     498            lcall ?Set_Cursor_2 ; Select column and row
072D D0E0       498            pop acc
072F C083       499            push dph
0731 C082       499            push dpl
0733 C0E0       499            push acc
0735 900371     499            mov dptr, #setup2
0738 120338     499            lcall ?Send_Constant_String
073B D0E0       499            pop acc
073D D082       499            pop dpl
073F D083       499            pop dph
0741            500     
0741 C0E0       501            push acc
0743 7405       501            mov a, #5
0745 14         501            dec a
0746 120343     501            lcall ?Set_Cursor_2 ; Select column and row
0749 D0E0       501            pop acc
074B 753000     502            mov x+0, #low (0 % 0x10000) 
074E 753100     502            mov x+1, #high(0 % 0x10000) 
0751 753200     502            mov x+2, #low (0 / 0x10000) 
0754 753300     502            mov x+3, #high(0 / 0x10000) 
0757 854830     503       mov x+0, reflow_temp
075A 12002E     504       lcall hex2bcd
075D            505       ; Display digit 3
075D E539       506       mov a, bcd+1
075F 540F       507       anl a, #0fh
0761 4430       508       orl a, #'0'
0763 F8         509       mov r0, a
0764 E8         510            mov a, r0
0765 120304     510            lcall ?WriteData
0768 C000       511            push ar0
076A A838       511            mov r0, bcd+0
076C 12034A     511            lcall ?Display_BCD
076F D000       511            pop ar0
0771 C0E0       512            push acc
0773 740E       512            mov a, #14
0775 14         512            dec a
0776 120343     512            lcall ?Set_Cursor_2 ; Select column and row
0779 D0E0       512            pop acc
077B 753000     513            mov x+0, #low (0 % 0x10000) 
077E 753100     513            mov x+1, #high(0 % 0x10000) 
0781 753200     513            mov x+2, #low (0 / 0x10000) 
0784 753300     513            mov x+3, #high(0 / 0x10000) 
0787 854930     514       mov x+0, reflow_time
078A 12002E     515       lcall hex2bcd
078D            516       ; Display digit 3
078D E539       517       mov a, bcd+1
078F 540F       518       anl a, #0fh
0791 4430       519       orl a, #'0'
0793 F8         520       mov r0, a
0794 E8         521            mov a, r0
0795 120304     521            lcall ?WriteData
0798 C000       522            push ar0
079A A838       522            mov r0, bcd+0
079C 12034A     522            lcall ?Display_BCD
079F D000       522            pop ar0
07A1 E544       523       mov a, edit_sett
07A3 B4020C     524       cjne a, #2, indic_refl_time
07A6 C0E0       525            push acc
07A8 7406       525            mov a, #6
07AA 14         525            dec a
07AB 120345     525            lcall ?Set_Cursor_1 ; Select column and row
07AE D0E0       525            pop acc
07B0 800A       526       sjmp indic_refl_next
07B2            527   indic_refl_time:
07B2 C0E0       528            push acc
07B4 740F       528            mov a, #15
07B6 14         528            dec a
07B7 120345     528            lcall ?Set_Cursor_1 ; Select column and row
07BA D0E0       528            pop acc
07BC            529   indic_refl_next:
07BC C0E0       530            push acc
07BE 742A       530            mov a, #'*'
07C0 120304     530            lcall ?WriteData
07C3 D0E0       530            pop acc
07C5 22         531       ret
07C6            532   coolScreen:
07C6 C0E0       533            push acc
07C8 7401       533            mov a, #1
07CA 14         533            dec a
07CB 120345     533            lcall ?Set_Cursor_1 ; Select column and row
07CE D0E0       533            pop acc
07D0 C083       534            push dph
07D2 C082       534            push dpl
07D4 C0E0       534            push acc
07D6 900393     534            mov dptr, #setup4
07D9 120338     534            lcall ?Send_Constant_String
07DC D0E0       534            pop acc
07DE D082       534            pop dpl
07E0 D083       534            pop dph
07E2 C0E0       535            push acc
07E4 7401       535            mov a, #1
07E6 14         535            dec a
07E7 120343     535            lcall ?Set_Cursor_2 ; Select column and row
07EA D0E0       535            pop acc
07EC C083       536            push dph
07EE C082       536            push dpl
07F0 C0E0       536            push acc
07F2 9003A4     536            mov dptr, #setup5
07F5 120338     536            lcall ?Send_Constant_String
07F8 D0E0       536            pop acc
07FA D082       536            pop dpl
07FC D083       536            pop dph
07FE            537   
07FE C0E0       538            push acc
0800 7405       538            mov a, #5
0802 14         538            dec a
0803 120343     538            lcall ?Set_Cursor_2 ; Select column and row
0806 D0E0       538            pop acc
0808 753000     539            mov x+0, #low (0 % 0x10000) 
080B 753100     539            mov x+1, #high(0 % 0x10000) 
080E 753200     539            mov x+2, #low (0 / 0x10000) 
0811 753300     539            mov x+3, #high(0 / 0x10000) 
0814 854C30     540       mov x+0, cool_temp
0817 12002E     541       lcall hex2bcd
081A            542       ; Display digit 3
081A E539       543       mov a, bcd+1
081C 540F       544       anl a, #0fh
081E 4430       545       orl a, #'0'
0820 F8         546       mov r0, a
0821 E8         547            mov a, r0
0822 120304     547            lcall ?WriteData
0825 C000       548            push ar0
0827 A838       548            mov r0, bcd+0
0829 12034A     548            lcall ?Display_BCD
082C D000       548            pop ar0
082E 22         549       ret
082F            550   
082F            551   
082F            552   pollButtons:
082F 208623     553       jb EDIT, DONT_EDIT           
0832 C002       554            push AR2
0834 7A32       554            mov R2, #50
0836 1202BF     554            lcall ?Wait_Milli_Seconds
0839 D002       554            pop AR2                 
083B 208617     555            jb EDIT, DONT_EDIT
083E 3086FD     556            jnb EDIT, $
0841            557   
0841 E544       558       mov a, edit_sett
0843 B40406     559       cjne a, #4, incEdit
0846 754400     560       mov edit_sett, #0
0849 020573     561       ljmp generateDisplay
084C E544       562       mov a, edit_sett
084E 2401       562       add a, #1
0850 F544       562       mov edit_sett, a
0852 020573     563       ljmp generateDisplay
0855            564   
0855            565   ; 0 - soak temp
0855            566   ; 1 - soak time
0855            567   ; 2 - reflow temp
0855            568   ; 3 - reflow time
0855            569   ; 4 - cool temp   
0855            570   DONT_EDIT:
0855 20835E     571       jb INCR, DONT_INC    
0858 C002       572            push AR2
085A 7A32       572            mov R2, #50
085C 1202BF     572            lcall ?Wait_Milli_Seconds
085F D002       572            pop AR2                 
0861 208352     573            jb INCR, DONT_INC               
0864 3083FD     574            jnb INCR, $
0867            575       
0867 E544       576       mov a, edit_sett
0869 B4000D     577       cjne a, #0, elem1
086C E546       578       mov a, soak_temp
086E 2401       578       add a, #1
0870 F546       578       mov soak_temp, a
0872 120A0C     579       lcall save_config                                    ; save config to nvmem
0875 020573     580       ljmp generateDisplay
0878 22         581       ret
0879 B4010D     582       elem1: cjne a, #1, elem2
087C E547       583       mov a, soak_time
087E 2401       583       add a, #1
0880 F547       583       mov soak_time, a
0882 120A0C     584       lcall save_config                                    ; save config to nvmem
0885 020573     585       ljmp generateDisplay
0888 22         586       ret
0889 B4020D     587       elem2: cjne a, #2, elem3
088C E548       588       mov a, reflow_temp
088E 2401       588       add a, #1
0890 F548       588       mov reflow_temp, a
0892 120A0C     589       lcall save_config                                    ; save config to nvmem
0895 020573     590       ljmp generateDisplay
0898 22         591       ret
0899 B4030D     592       elem3: cjne a, #3, elem4
089C E549       593       mov a, reflow_time
089E 2401       593       add a, #1
08A0 F549       593       mov reflow_time, a
08A2 120A0C     594       lcall save_config                                    ; save config to nvmem
08A5 020573     595       ljmp generateDisplay
08A8 22         596       ret
08A9 E54C       597       mov a, cool_temp
08AB 2401       597       add a, #1
08AD F54C       597       mov cool_temp, a
08AF 120A0C     598       lcall save_config                                    ; save config to nvmem
08B2 020573     599       ljmp generateDisplay
08B5 22         600       ret
08B6            601       
08B6            602   DONT_INC:
08B6 208077     603       jb DECR, DONT_DEC
08B9 C002       604            push AR2
08BB 7A32       604            mov R2, #50
08BD 1202BF     604            lcall ?Wait_Milli_Seconds
08C0 D002       604            pop AR2                 
08C2 20806B     605            jb DECR, DONT_DEC       
08C5 3080FD     606            jnb DECR, $
08C8            607   
08C8 E544       608       mov a, edit_sett
08CA B40012     609       cjne a, #0, delem1
08CD E546       610       mov a, soak_temp
08CF B40002     610       cjne a, #0, dec_setting_next_74
08D2 8004       610       sjmp dec_setting_end_74
08D4            610   dec_setting_next_74:
08D4 9401       610       subb a, #1
08D6 F546       610       mov soak_temp, a
08D8            610   dec_setting_end_74:
08D8 120A0C     611       lcall save_config                                    ; save config to nvmem
08DB 020573     612       ljmp generateDisplay
08DE 22         613       ret
08DF B40112     614       delem1: cjne a, #1, delem2
08E2 E547       615       mov a, soak_time
08E4 B40002     615       cjne a, #0, dec_setting_next_75
08E7 8004       615       sjmp dec_setting_end_75
08E9            615   dec_setting_next_75:
08E9 9401       615       subb a, #1
08EB F547       615       mov soak_time, a
08ED            615   dec_setting_end_75:
08ED 120A0C     616       lcall save_config                                    ; save config to nvmem
08F0 020573     617       ljmp generateDisplay
08F3 22         618       ret
08F4 B40212     619       delem2: cjne a, #2, delem3
08F7 E548       620       mov a, reflow_temp
08F9 B40002     620       cjne a, #0, dec_setting_next_76
08FC 8004       620       sjmp dec_setting_end_76
08FE            620   dec_setting_next_76:
08FE 9401       620       subb a, #1
0900 F548       620       mov reflow_temp, a
0902            620   dec_setting_end_76:
0902 120A0C     621       lcall save_config                                    ; save config to nvmem
0905 020573     622       ljmp generateDisplay
0908 22         623       ret
0909 B40312     624       delem3: cjne a, #3, delem4
090C E549       625       mov a, reflow_time
090E B40002     625       cjne a, #0, dec_setting_next_77
0911 8004       625       sjmp dec_setting_end_77
0913            625   dec_setting_next_77:
0913 9401       625       subb a, #1
0915 F549       625       mov reflow_time, a
0917            625   dec_setting_end_77:
0917 120A0C     626       lcall save_config                                    ; save config to nvmem
091A 020573     627       ljmp generateDisplay
091D 22         628       ret
091E E54C       629       mov a, cool_temp
0920 B40002     629       cjne a, #0, dec_setting_next_78
0923 8004       629       sjmp dec_setting_end_78
0925            629   dec_setting_next_78:
0925 9401       629       subb a, #1
0927 F54C       629       mov cool_temp, a
0929            629   dec_setting_end_78:
0929 120A0C     630       lcall save_config                                    ; save config to nvmem
092C 020573     631       ljmp generateDisplay
092F 22         632       ret
0930            633   
0930 22         634   DONT_DEC: ret
0931            635   
0931            636   ;---------------------------------------------------------------------------------------
0931            637   
0931            638   reset:
0931 20C513     639            jb RST, DONT_RESET                              ; if 'RESET' is pressed, wait for rebouce
0934 C002       640            push AR2
0936 7A32       640            mov R2, #50
0938 1202BF     640            lcall ?Wait_Milli_Seconds
093B D002       640            pop AR2                         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
093D 20C507     641            jb RST, DONT_RESET                              ; if the 'RESET' button is not pressed skip
0940 30C5FD     642            jnb RST, $
0943 7405       643            mov a, #5                                               ; reset to state 5 when reset for safety
0945 F545       644            mov state, a
0947 22         645   DONT_RESET: ret  
0948            646   
0948            647   start_or_not:
0948 20A411     648            jb START_STOP, DONT_START               ; if 'RESET' is pressed, wait for rebouce
094B C002       649            push AR2
094D 7A32       649            mov R2, #50
094F 1202BF     649            lcall ?Wait_Milli_Seconds
0952 D002       649            pop AR2                         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0954 20A405     650            jb START_STOP, DONT_START               ; if the 'RESET' button is not pressed skip
0957 30A4FD     651            jnb START_STOP, $
095A B201       652            cpl start_flag
095C 22         653            DONT_START: ret         
095D            654   
095D            655   PWM_OUTPUT:
095D E54A       656            mov a, pwm
095F B46409     657            cjne a, #100, holding_temp              ; if pwm is 100, then OUTPUT = 1 all 
0962 D2D0       658            setb OUTPUT                                             ; the time
0964 22         659            ret
0965            660   
0965 B40003     661            cjne a, #0, holding_temp                ; if pwm is 0, then OUTPUT = 0 all
0968 C2D0       662            clr OUTPUT                                              ; the time
096A 22         663            ret
096B            664   
096B            665            holding_temp:   
096B E53F       666            mov a, Count1ms
096D B4000E     667            cjne a, #0 , Not_yet                    ; check whether it is time to turn on the pwm pin                
0970 C2D0       668            clr OUTPUT                                              ; clr OUTPUT if at the begining of the period
0972 E53F       669            mov a, Count1ms+0
0974 B42007     670            cjne a, #low(PWM_20), Not_yet   ; Warning: this instruction changes the carry flag!
0977 E540       671            mov a, Count1ms+1
0979 B40302     672            cjne a, #high(PWM_20), Not_yet  ; if Count1ms = PWM_20, set the OUTPUT to 1
097C D2D0       673            setb OUTPUT
097E 22         674   Not_yet: ret
097F            675   
097F            676   Load_Defaults: ; Load defaults if 'keys' are incorrect
097F 754696     677            mov soak_temp, #150
0982 75472D     678            mov soak_time, #45
0985 7548E1     679            mov reflow_temp, #225
0988 75491E     680            mov reflow_time, #30
098B 754C32     681       mov cool_temp, #50
098E 22         682            ret
098F            683   
098F            684   ;-------------------------------------FSM time!!---------------------------------------
098F            685   FSM:                                                      
098F E545       686            mov a, state
0991            687   state0:                                                  ; default state
0991 B40011     688            cjne a, #0, state1                      ; if not state 0, then go to next branch
0994 754A00     689            mov pwm, #0                                     ; at state 0, pwm is 0%
0997 120948     690            lcall start_or_not
099A 300105     691            jnb start_flag, state0_done     ; if start key is not press, the go to state0_done
099D 754501     692            mov state, #1
09A0 C201       693            clr start_flag
09A2            694   state0_done:
09A2 0204A4     695            ljmp forever
09A5            696   state1:                                                  ; ramp to soak
09A5 B40115     697            cjne a, #1, state2
09A8 754A64     698            mov pwm, #100
09AB 754B00     699            mov sec, #0
09AE E546       700            mov a, soak_temp
09B0 C3         701            clr c
09B1 954D       702            subb a, temp                            ; if temp > soak_temp, c = 1
09B3 5005       703            jnc state1_done                                 ; if temp is not at soak temp, then go to state1_done
09B5 754502     704            mov state, #2
09B8 D201       705            setb start_flag
09BA            706   state1_done:
09BA 0204A4     707            ljmp forever
09BD            708   
09BD            709   state2:                                                  ; soak/preheat
09BD B40210     710            cjne a, #2, state3
09C0 754A14     711            mov pwm, #HOLD_PWM
09C3 E547       712            mov a, soak_time
09C5 C3         713            clr c
09C6 954B       714            subb a, sec                                     ; if sec > soak time, c = 1
09C8 5003       715            jnc state2_done                                 ; if sec is not at soak time, then go to state2_done 
09CA 754503     716            mov state, #3   
09CD            717   state2_done:
09CD 0204A4     718            ljmp forever
09D0            719   
09D0            720   state3:                                                  ; ramp to peak, prepare to reflow
09D0 B40313     721            cjne a, #3, state4
09D3 754A64     722            mov pwm, #100
09D6 754B00     723            mov sec, #0
09D9 E548       724            mov a, reflow_temp
09DB C3         725            clr c
09DC 954D       726            subb a, temp                            ; if temp > reflow_temp, c = 1
09DE 5003       727            jnc state3_done                                 ; if temp is not at reflow_temp, then go to state3_done 
09E0 754504     728            mov state, #4   
09E3            729   state3_done:
09E3 0204A4     730            ljmp forever
09E6            731   
09E6            732   state4:                                                  ; ramp to peak, prepare to reflow
09E6 B40410     733            cjne a, #4, state5
09E9 754A14     734            mov pwm, #HOLD_PWM
09EC E549       735            mov a, reflow_time
09EE C3         736            clr c
09EF 954B       737            subb a, sec                                     ; if sec > reflow_temp, c = 1
09F1 5003       738            jnc state4_done                                 ; if sec is not at reflow time, then go to state4_done 
09F3 754505     739            mov state, #5   
09F6            740   state4_done:
09F6 0204A4     741            ljmp forever
09F9            742   
09F9            743   state5:                                                  ; cooling state
09F9 B40595     744            cjne a, #5, state0
09FC 754A00     745            mov pwm, #0
09FF E54D       746            mov a, temp
0A01 C3         747            clr c
0A02 954C       748            subb a, cool_temp                       ; if cool_temp > temp, c = 1
0A04 5003       749            jnc state5_done                                 ; if temp is not at cool_temp, then go to state5_done 
0A06 754500     750            mov state, #0   
0A09            751   state5_done:
0A09 0204A4     752            ljmp forever 
0A0C            753   ;----------------------------------------------------------------------------------------
0A0C            754   
0A0C            755   ;---------------------------------save to nvmem-------------------------------
                756   loadbyte mac
                757   	mov a, %0
                758   	movx @dptr, a
                759   	inc dptr
                760   endmac
0A0C            761   save_config:
0A0C C0A8       762       push IE ; Save the current state of bit EA in the stack
0A0E C2AF       763       clr EA ; Disable interrupts
0A10 75D108     764            mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
0A13 907F80     765            mov dptr, #0x7f80 ; Last page of flash memory
0A16            766            ; Save variables
0A16 E546       767            mov a, soak_temp
0A18 F0         767            movx @dptr, a
0A19 A3         767            inc dptr ; @0x7f80
0A1A E547       768            mov a, soak_time
0A1C F0         768            movx @dptr, a
0A1D A3         768            inc dptr ; @0x7f81
0A1E E548       769            mov a, reflow_temp
0A20 F0         769            movx @dptr, a
0A21 A3         769            inc dptr ; @0x7f82
0A22 E549       770            mov a, reflow_time
0A24 F0         770            movx @dptr, a
0A25 A3         770            inc dptr ; @0x7f83
0A26 E54C       771            mov a, cool_temp
0A28 F0         771            movx @dptr, a
0A29 A3         771            inc dptr ; @0x7f84
0A2A 7455       772            mov a, #0x55
0A2C F0         772            movx @dptr, a
0A2D A3         772            inc dptr ; First key value @0x7f84
0A2E 74AA       773            mov a, #0xAA
0A30 F0         773            movx @dptr, a
0A31 A3         773            inc dptr ; Second key value @0x7f85
0A32 75D100     774            mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0A35 43D240     775            orl EECON, #0b01000000 ; Enable auto-erase on next write sequence
0A38 75D150     776            mov FCON, #0x50 ; Write trigger first byte
0A3B 75D1A0     777            mov FCON, #0xA0 ; Write trigger second byte
0A3E            778            ; CPU idles until writing of flash completes.
0A3E 75D100     779            mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0A41 53D2BF     780            anl EECON, #0b10111111 ; Disable auto-erase
0A44 D0A8       781            pop IE ; Restore the state of bit EA from the stack
0A46 22         782       ret
0A47            783   ;-----------------------------------------------------------------------------
0A47            784   
0A47            785   ;------------------------------read from nvmem--------------------------------
                786   getbyte mac
                787       clr a
                788       movc a, @a+dptr
                789       mov %0, a
                790       inc dptr
                791   Endmac
0A47            792   Load_Configuration:
0A47 907F84     793       mov dptr, #0x7f84 ; First key value location.
0A4A E4         794       clr a
0A4B 93         794       movc a, @a+dptr
0A4C F8         794       mov R0, a
0A4D A3         794       inc dptr ; 0x7f84 should contain 0x55
0A4E B85524     795       cjne R0, #0x55, jumpToLoadDef
0A51 E4         796       clr a
0A52 93         796       movc a, @a+dptr
0A53 F8         796       mov R0, a
0A54 A3         796       inc dptr ; 0x7f85 should contain 0xAA
0A55 B8AA1D     797       cjne R0, #0xAA, jumpToLoadDef
0A58            798   ; Keys are good. Get stored values.
0A58 907F80     799       mov dptr, #0x7f80
0A5B E4         800       clr a
0A5C 93         800       movc a, @a+dptr
0A5D F546       800       mov soak_temp, a
0A5F A3         800       inc dptr ; 0x7f80
0A60 E4         801       clr a
0A61 93         801       movc a, @a+dptr
0A62 F547       801       mov soak_time, a
0A64 A3         801       inc dptr ; 0x7f81
0A65 E4         802       clr a
0A66 93         802       movc a, @a+dptr
0A67 F548       802       mov reflow_temp, a
0A69 A3         802       inc dptr ; 0x7f82
0A6A E4         803       clr a
0A6B 93         803       movc a, @a+dptr
0A6C F549       803       mov reflow_time, a
0A6E A3         803       inc dptr ; 0x7f83
0A6F E4         804       clr a
0A70 93         804       movc a, @a+dptr
0A71 F54C       804       mov cool_temp, a
0A73 A3         804       inc dptr
0A74 22         805       ret
0A75            806   jumpToLoadDef:
0A75 02097F     807            ljmp Load_Defaults
0A78            808   ;----------------------------------------------------------------------------
0A78            809   
0A78            810   ;----------------------------------------------------------------------
0A78            811   cold_junc:
0A78            812   
0A78 22         813   ret
0A79            814   ;----------------------------------------------------------------------
0A79            815   
0A79            816   
0A79            817   ;----------------------------------------------------------------------
0A79            818   hot_junc:
0A79            819   
0A79 22         820   ret
0A7A            821   ;----------------------------------------------------------------------
0A7A            822   
0A7A            823   END
