0000              1   ; AT89LP51RC2_Receiver.asm:  This program implements a simple serial port
0000              2   ; communication protocol to program, verify, and read an SPI flash memory.  Since
0000              3   ; the program was developed to store wav audio files, it also allows 
0000              4   ; for the playback of said audio.  It is assumed that the wav sampling rate is
0000              5   ; 22050Hz, 8-bit, mono.
0000              6   ;
0000              7   ; Connections:
0000              8   ; 
0000              9   ; AT89LP51RD2   SPI_FLASH
0000             10   ; (20) P2.0     Pin 6 (SPI_CLK)
0000             11   ; (21) P2.1     Pin 2 (MISO)
0000             12   ; (24) P2.4     Pin 5 (MOSI)
0000             13   ; (25) P2.5     Pin 1 (CS/)
0000             14   ; GND           Pin 4
0000             15   ; 3.3V          Pins 3, 7, 8
0000             16   ;
0000             17   ; The DAC output (P2.3, pin 23) should be connected to the
0000             18   ; input of power amplifier (LM386 or similar)
0000             19   ;
0000             20   ; WARNING: Pins P2.2 and P2.3 are the DAC outputs and can not be used for anything else
0000             21   
                 23   $LIST
0000             25   
0000             26   SYSCLK         EQU 22118400  ; Microcontroller system clock frequency in Hz
0000             27   TIMER1_RATE    EQU 22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             28   TIMER1_RELOAD  EQU 0x10000-(SYSCLK/TIMER1_RATE)
0000             29   BAUDRATE       EQU 115200
0000             30   BRG_VAL        EQU (0x100-(SYSCLK/(16*BAUDRATE)))
0000             31   
0000             32   SPEAKER  EQU P2.4 ; Used with a MOSFET to turn off speaker when not in use
0000             33   
0000             34   ; The pins used for SPI
0000             35   FLASH_CE  EQU  P0.7                      ; 1, was 2.5
0000             36   MY_MOSI   EQU  P2.5              ; 5, was 2.4
0000             37   MY_MISO   EQU  P2.7                      ; 2, was 2.1
0000             38   MY_SCLK   EQU  P0.4              ; 6, was 2.0
0000             39   
0000             40   ; Commands supported by the SPI flash memory according to the datasheet
0000             41   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             42   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             43   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             44   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             45   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             46   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             47   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             48   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             49   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             50   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             51   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             52   
0000             53   ; Variables used in the program:
0030             54   dseg at 30H
0030             55            w:   ds 3 ; 24-bit play counter.  Decremented in Timer 1 ISR.
0033             56   
0033             57   ; Interrupt vectors:
0000             58   cseg
0000             59   
0000             60   org 0x0000 ; Reset vector
0000 020378      61       ljmp MainProgram
0003             62   
0003             63   org 0x0003 ; External interrupt 0 vector (not used in this code)
0003 32          64            reti
0004             65   
000B             66   org 0x000B ; Timer/Counter 0 overflow interrupt vector (not used in this code)
000B 32          67            reti
000C             68   
0013             69   org 0x0013 ; External interrupt 1 vector. (not used in this code)
0013 32          70            reti
0014             71   
001B             72   org 0x001B ; Timer/Counter 1 overflow interrupt vector. Used in this code to replay the wave file.
001B 020064      73            ljmp Timer1_ISR
001E             74   
0023             75   org 0x0023 ; Serial port receive/transmit interrupt vector (not used in this code)
0023 32          76            reti
0024             77   
005B             78   org 0x005b ; Timer 2 interrupt vector. (not used in this code)
005B 32          79            reti
005C             80   
0063             81   org 0x0063 ; ADC interrupt (vector must be present if debugger is used)
0063 32          82            reti
0064             83   
0064             84   ;-------------------------------------;
0064             85   ; ISR for Timer 1.  Used to playback  ;
0064             86   ; the WAV file stored in the SPI      ;
0064             87   ; flash memory.                       ;
0064             88   ;-------------------------------------;
0064             89   Timer1_ISR:
0064             90            ; The registers used in the ISR must be saved in the stack
0064 C0E0        91            push acc
0066 C0D0        92            push psw
0068             93            
0068             94            ; Check if the play counter is zero.  If so, stop playing sound.
0068 E530        95            mov a, w+0
006A 4531        96            orl a, w+1
006C 4532        97            orl a, w+2
006E 601C        98            jz stop_playing
0070             99            
0070            100            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
0070 74FF       101            mov a, #0xff
0072 1530       102            dec w+0
0074 B53007     103            cjne a, w+0, keep_playing
0077 1531       104            dec w+1
0079 B53102     105            cjne a, w+1, keep_playing
007C 1532       106            dec w+2
007E            107            
007E            108   keep_playing:
007E D2A4       109            setb SPEAKER
0080 1200AD     110            lcall Send_SPI ; Read the next byte from the SPI Flash...
0083            111            ;mov P0, a ; WARNING: Remove this if not using an external DAC to use the pins of P0 as GPIO
0083 2480       112            add a, #0x80
0085 F5AD       113            mov DADH, a ; Output to DAC. DAC output is pin P2.3
0087 43A440     114            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
008A 800C       115            sjmp Timer1_ISR_Done
008C            116   
008C            117   stop_playing:
008C C28E       118            clr TR1 ; Stop timer 1
008E D287       119            setb FLASH_CE  ; Disable SPI Flash
0090 C2A4       120            clr SPEAKER ; Turn off speaker.  Removes hissing noise when not playing sound.
0092 75AD80     121            mov DADH, #0x80 ; middle of range
0095 43A440     122            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
0098            123   
0098            124   Timer1_ISR_Done:         
0098 D0D0       125            pop psw
009A D0E0       126            pop acc
009C 32         127            reti
009D            128   
009D            129   ;---------------------------------;
009D            130   ; Sends a byte via serial port    ;
009D            131   ;---------------------------------;
009D            132   putchar:
009D 109902     133            jbc     TI,putchar_L1
00A0 80FB       134            sjmp putchar
00A2            135   putchar_L1:
00A2 F599       136            mov     SBUF,a
00A4 22         137            ret
00A5            138   
00A5            139   ;---------------------------------;
00A5            140   ; Receive a byte from serial port ;
00A5            141   ;---------------------------------;
00A5            142   getchar:
00A5 109802     143            jbc     RI,getchar_L1
00A8 80FB       144            sjmp getchar
00AA            145   getchar_L1:
00AA E599       146            mov     a,SBUF
00AC 22         147            ret
00AD            148   
00AD            149   ;---------------------------------;
00AD            150   ; Sends AND receives a byte via   ;
00AD            151   ; SPI.                            ;
00AD            152   ;---------------------------------;
00AD            153   Send_SPI:
                154   	SPIBIT MAC
                155   	    ; Send/Receive bit %0
                156   		rlc a
                157   		mov MY_MOSI, c
                158   		setb MY_SCLK
                159   		mov c, MY_MISO
                160   		clr MY_SCLK
                161   		mov acc.0, c
                162   	ENDMAC
00AD            163            
00AD            164                ; Send/Receive bit 7
00AD 33         164                    rlc a
00AE 92A5       164                    mov MY_MOSI, c
00B0 D284       164                    setb MY_SCLK
00B2 A2A7       164                    mov c, MY_MISO
00B4 C284       164                    clr MY_SCLK
00B6 92E0       164                    mov acc.0, c
00B8            165                ; Send/Receive bit 6
00B8 33         165                    rlc a
00B9 92A5       165                    mov MY_MOSI, c
00BB D284       165                    setb MY_SCLK
00BD A2A7       165                    mov c, MY_MISO
00BF C284       165                    clr MY_SCLK
00C1 92E0       165                    mov acc.0, c
00C3            166                ; Send/Receive bit 5
00C3 33         166                    rlc a
00C4 92A5       166                    mov MY_MOSI, c
00C6 D284       166                    setb MY_SCLK
00C8 A2A7       166                    mov c, MY_MISO
00CA C284       166                    clr MY_SCLK
00CC 92E0       166                    mov acc.0, c
00CE            167                ; Send/Receive bit 4
00CE 33         167                    rlc a
00CF 92A5       167                    mov MY_MOSI, c
00D1 D284       167                    setb MY_SCLK
00D3 A2A7       167                    mov c, MY_MISO
00D5 C284       167                    clr MY_SCLK
00D7 92E0       167                    mov acc.0, c
00D9            168                ; Send/Receive bit 3
00D9 33         168                    rlc a
00DA 92A5       168                    mov MY_MOSI, c
00DC D284       168                    setb MY_SCLK
00DE A2A7       168                    mov c, MY_MISO
00E0 C284       168                    clr MY_SCLK
00E2 92E0       168                    mov acc.0, c
00E4            169                ; Send/Receive bit 2
00E4 33         169                    rlc a
00E5 92A5       169                    mov MY_MOSI, c
00E7 D284       169                    setb MY_SCLK
00E9 A2A7       169                    mov c, MY_MISO
00EB C284       169                    clr MY_SCLK
00ED 92E0       169                    mov acc.0, c
00EF            170                ; Send/Receive bit 1
00EF 33         170                    rlc a
00F0 92A5       170                    mov MY_MOSI, c
00F2 D284       170                    setb MY_SCLK
00F4 A2A7       170                    mov c, MY_MISO
00F6 C284       170                    clr MY_SCLK
00F8 92E0       170                    mov acc.0, c
00FA            171                ; Send/Receive bit 0
00FA 33         171                    rlc a
00FB 92A5       171                    mov MY_MOSI, c
00FD D284       171                    setb MY_SCLK
00FF A2A7       171                    mov c, MY_MISO
0101 C284       171                    clr MY_SCLK
0103 92E0       171                    mov acc.0, c
0105            172   
0105 22         173            ret
0106            174   
0106            175   ;---------------------------------;
0106            176   ; SPI flash 'write enable'        ;
0106            177   ; instruction.                    ;
0106            178   ;---------------------------------;
0106            179   Enable_Write:
0106 C287       180            clr FLASH_CE
0108 7406       181            mov a, #WRITE_ENABLE
010A 1200AD     182            lcall Send_SPI
010D D287       183            setb FLASH_CE
010F 22         184            ret
0110            185   
0110            186   ;---------------------------------;
0110            187   ; This function checks the 'write ;
0110            188   ; in progress' bit of the SPI     ;
0110            189   ; flash memory.                   ;
0110            190   ;---------------------------------;
0110            191   Check_WIP:
0110 C287       192            clr FLASH_CE
0112 7405       193            mov a, #READ_STATUS
0114 1200AD     194            lcall Send_SPI
0117 7455       195            mov a, #0x55
0119 1200AD     196            lcall Send_SPI
011C D287       197            setb FLASH_CE
011E 20E0EF     198            jb acc.0, Check_WIP ;  Check the Write in Progress bit
0121 22         199            ret
0122            200            
0122            201   Init_all:
0122            202       ; Since the reset button bounces, we need to wait a bit before
0122            203       ; sending messages, otherwise we risk displaying gibberish!
0122 79DE       204       mov R1, #222
0124 78A6       205       mov R0, #166
0126 D8FE       206       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0128 D9FA       207       djnz R1, $-4 ; 22.51519us*222=4.998ms
012A            208       ; Now we can proceed with the configuration
012A            209            
012A            210            ; Enable serial communication and set up baud rate
012A 438780     211            orl     PCON,#0x80
012D 759852     212            mov     SCON,#0x52
0130 759B00     213            mov     BDRCON,#0x00
0133 759AF4     214            mov     BRL,#BRG_VAL
0136 759B1E     215            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
0139            216            
0139            217            ; Configure SPI pins and turn off speaker
0139            218            ;anl P2M0, #0b_1100_1110
0139            219            ;orl P2M1, #0b_0011_0001
0139            220   
0139            221            ; Configure MY_MOSI/P2.5 as open drain output
0139 43CE20     222            orl P2M0, #0b_0010_0000
013C 43CF20     223            orl P2M1, #0b_0010_0000
013F            224   
013F            225            ; Configure FLASH_CE/P0.7 and MY_SCLK/P0.4 as open drain outputs
013F 43E690     226            orl P0M0, #0b_1001_0000
0142 43E748     227            orl P0M1, #0b_1001_000
0145            228   
0145 D2A7       229            setb MY_MISO  ; Configured as input
0147 D287       230            setb FLASH_CE ; CS=1 for SPI flash memory
0149 C284       231            clr MY_SCLK   ; Rest state of SCLK=0
014B C2A4       232            clr SPEAKER   ; Turn off speaker.
014D            233            
014D            234            ; Configure timer 1
014D 53890F     235            anl     TMOD, #0x0F ; Clear the bits of timer 1 in TMOD
0150 438910     236            orl     TMOD, #0x10 ; Set timer 1 in 16-bit timer mode.  Don't change the bits of timer 0
0153 758DFC     237            mov TH1, #high(TIMER1_RELOAD)
0156 758B15     238            mov TL1, #low(TIMER1_RELOAD)
0159            239            ; Set autoreload value
0159 75F5FC     240            mov RH1, #high(TIMER1_RELOAD)
015C 75F315     241            mov RL1, #low(TIMER1_RELOAD)
015F            242   
015F            243            ; Enable the timer and interrupts
015F D2AB       244       setb ET1  ; Enable timer 1 interrupt
0161            245            ; setb TR1 ; Timer 1 is only enabled to play stored sound
0161            246   
0161            247            ; Configure the DAC.  The DAC output we are using is P2.3, but P2.2 is also reserved.
0161 75A5A0     248            mov DADI, #0b_1010_0000 ; ACON=1
0164 75A43A     249            mov DADC, #0b_0011_1010 ; Enabled, DAC mode, Left adjusted, CLK/4
0167 75AD80     250            mov DADH, #0x80 ; Middle of scale
016A 75AC00     251            mov DADL, #0
016D 43A440     252            orl DADC, #0b_0100_0000 ; Start DAC by GO/BSY=1
0170            253   check_DAC_init:
0170 E5A4       254            mov a, DADC
0172 20E6FB     255            jb acc.6, check_DAC_init ; Wait for DAC to finish
0175            256            
0175 D2AF       257            setb EA ; Enable interrupts
0177            258   
0177            259            ; Not necesary if using internal DAC.
0177            260            ; If using an R-2R DAC connected to P0, configure the pins of P0
0177            261            ; (An external R-2R produces much better quality sound)
0177            262            ;mov P0M0, #0b_0000_0000
0177            263            ;mov P0M1, #0b_1111_1111
0177            264            
0177 22         265            ret
0178            266   
0178            267   ;---------------------------------;
0178            268   ; CRC-CCITT (XModem) Polynomial:  ;
0178            269   ; x^16 + x^12 + x^5 + 1 (0x1021)  ;
0178            270   ; CRC in [R7,R6].                 ;
0178            271   ; Converted to a macro to remove  ;
0178            272   ; the overhead of 'lcall' and     ;
0178            273   ; 'ret' instructions, since this  ;
0178            274   ; 'routine' may be executed over  ;
0178            275   ; 4 million times!                ;
0178            276   ;---------------------------------;
0178            277   ;crc16:
                278   crc16 mac
                279   	xrl	a, r7			; XOR high of CRC with byte
                280   	mov r0, a			; Save for later use
                281   	mov	dptr, #CRC16_TH ; dptr points to table high
                282   	movc a, @a+dptr		; Get high part from table
                283   	xrl	a, r6			; XOR With low byte of CRC
                284   	mov	r7, a			; Store to high byte of CRC
                285   	mov a, r0			; Retrieve saved accumulator
                286   	mov	dptr, #CRC16_TL	; dptr points to table low	
                287   	movc a, @a+dptr		; Get Low from table
                288   	mov	r6, a			; Store to low byte of CRC
                289   	;ret
                290   endmac
0178            291   
0178            292   ;---------------------------------;
0178            293   ; High constants for CRC-CCITT    ;
0178            294   ; (XModem) Polynomial:            ;
0178            295   ; x^16 + x^12 + x^5 + 1 (0x1021)  ;
0178            296   ;---------------------------------;
0178            297   CRC16_TH:
0178 00102030   298            db      000h, 010h, 020h, 030h, 040h, 050h, 060h, 070h
     40506070
0180 8191A1B1   299            db      081h, 091h, 0A1h, 0B1h, 0C1h, 0D1h, 0E1h, 0F1h
     C1D1E1F1
0188 12023222   300            db      012h, 002h, 032h, 022h, 052h, 042h, 072h, 062h
     52427262
0190 9383B3A3   301            db      093h, 083h, 0B3h, 0A3h, 0D3h, 0C3h, 0F3h, 0E3h
     D3C3F3E3
0198 24340414   302            db      024h, 034h, 004h, 014h, 064h, 074h, 044h, 054h
     64744454
01A0 A5B58595   303            db      0A5h, 0B5h, 085h, 095h, 0E5h, 0F5h, 0C5h, 0D5h
     E5F5C5D5
01A8 36261606   304            db      036h, 026h, 016h, 006h, 076h, 066h, 056h, 046h
     76665646
01B0 B7A79787   305            db      0B7h, 0A7h, 097h, 087h, 0F7h, 0E7h, 0D7h, 0C7h
     F7E7D7C7
01B8 48586878   306            db      048h, 058h, 068h, 078h, 008h, 018h, 028h, 038h
     08182838
01C0 C9D9E9F9   307            db      0C9h, 0D9h, 0E9h, 0F9h, 089h, 099h, 0A9h, 0B9h
     8999A9B9
01C8 5A4A7A6A   308            db      05Ah, 04Ah, 07Ah, 06Ah, 01Ah, 00Ah, 03Ah, 02Ah
     1A0A3A2A
01D0 DBCBFBEB   309            db      0DBh, 0CBh, 0FBh, 0EBh, 09Bh, 08Bh, 0BBh, 0ABh
     9B8BBBAB
01D8 6C7C4C5C   310            db      06Ch, 07Ch, 04Ch, 05Ch, 02Ch, 03Ch, 00Ch, 01Ch
     2C3C0C1C
01E0 EDFDCDDD   311            db      0EDh, 0FDh, 0CDh, 0DDh, 0ADh, 0BDh, 08Dh, 09Dh
     ADBD8D9D
01E8 7E6E5E4E   312            db      07Eh, 06Eh, 05Eh, 04Eh, 03Eh, 02Eh, 01Eh, 00Eh
     3E2E1E0E
01F0 FFEFDFCF   313            db      0FFh, 0EFh, 0DFh, 0CFh, 0BFh, 0AFh, 09Fh, 08Fh
     BFAF9F8F
01F8 9181B1A1   314            db      091h, 081h, 0B1h, 0A1h, 0D1h, 0C1h, 0F1h, 0E1h
     D1C1F1E1
0200 10003020   315            db      010h, 000h, 030h, 020h, 050h, 040h, 070h, 060h
     50407060
0208 8393A3B3   316            db      083h, 093h, 0A3h, 0B3h, 0C3h, 0D3h, 0E3h, 0F3h
     C3D3E3F3
0210 02122232   317            db      002h, 012h, 022h, 032h, 042h, 052h, 062h, 072h
     42526272
0218 B5A59585   318            db      0B5h, 0A5h, 095h, 085h, 0F5h, 0E5h, 0D5h, 0C5h
     F5E5D5C5
0220 34241404   319            db      034h, 024h, 014h, 004h, 074h, 064h, 054h, 044h
     74645444
0228 A7B78797   320            db      0A7h, 0B7h, 087h, 097h, 0E7h, 0F7h, 0C7h, 0D7h
     E7F7C7D7
0230 26360616   321            db      026h, 036h, 006h, 016h, 066h, 076h, 046h, 056h
     66764656
0238 D9C9F9E9   322            db      0D9h, 0C9h, 0F9h, 0E9h, 099h, 089h, 0B9h, 0A9h
     9989B9A9
0240 58487868   323            db      058h, 048h, 078h, 068h, 018h, 008h, 038h, 028h
     18083828
0248 CBDBEBFB   324            db      0CBh, 0DBh, 0EBh, 0FBh, 08Bh, 09Bh, 0ABh, 0BBh
     8B9BABBB
0250 4A5A6A7A   325            db      04Ah, 05Ah, 06Ah, 07Ah, 00Ah, 01Ah, 02Ah, 03Ah
     0A1A2A3A
0258 FDEDDDCD   326            db      0FDh, 0EDh, 0DDh, 0CDh, 0BDh, 0ADh, 09Dh, 08Dh
     BDAD9D8D
0260 7C6C5C4C   327            db      07Ch, 06Ch, 05Ch, 04Ch, 03Ch, 02Ch, 01Ch, 00Ch
     3C2C1C0C
0268 EFFFCFDF   328            db      0EFh, 0FFh, 0CFh, 0DFh, 0AFh, 0BFh, 08Fh, 09Fh
     AFBF8F9F
0270 6E7E4E5E   329            db      06Eh, 07Eh, 04Eh, 05Eh, 02Eh, 03Eh, 00Eh, 01Eh
     2E3E0E1E
0278            330   
0278            331   ;---------------------------------;
0278            332   ; Low constants for CRC-CCITT     ;
0278            333   ; (XModem) Polynomial:            ;
0278            334   ; x^16 + x^12 + x^5 + 1 (0x1021)  ;
0278            335   ;---------------------------------;
0278            336   CRC16_TL:
0278 00214263   337            db      000h, 021h, 042h, 063h, 084h, 0A5h, 0C6h, 0E7h
     84A5C6E7
0280 08294A6B   338            db      008h, 029h, 04Ah, 06Bh, 08Ch, 0ADh, 0CEh, 0EFh
     8CADCEEF
0288 31107352   339            db      031h, 010h, 073h, 052h, 0B5h, 094h, 0F7h, 0D6h
     B594F7D6
0290 39187B5A   340            db      039h, 018h, 07Bh, 05Ah, 0BDh, 09Ch, 0FFh, 0DEh
     BD9CFFDE
0298 62432001   341            db      062h, 043h, 020h, 001h, 0E6h, 0C7h, 0A4h, 085h
     E6C7A485
02A0 6A4B2809   342            db      06Ah, 04Bh, 028h, 009h, 0EEh, 0CFh, 0ACh, 08Dh
     EECFAC8D
02A8 53721130   343            db      053h, 072h, 011h, 030h, 0D7h, 0F6h, 095h, 0B4h
     D7F695B4
02B0 5B7A1938   344            db      05Bh, 07Ah, 019h, 038h, 0DFh, 0FEh, 09Dh, 0BCh
     DFFE9DBC
02B8 C4E586A7   345            db      0C4h, 0E5h, 086h, 0A7h, 040h, 061h, 002h, 023h
     40610223
02C0 CCED8EAF   346            db      0CCh, 0EDh, 08Eh, 0AFh, 048h, 069h, 00Ah, 02Bh
     48690A2B
02C8 F5D4B796   347            db      0F5h, 0D4h, 0B7h, 096h, 071h, 050h, 033h, 012h
     71503312
02D0 FDDCBF9E   348            db      0FDh, 0DCh, 0BFh, 09Eh, 079h, 058h, 03Bh, 01Ah
     79583B1A
02D8 A687E4C5   349            db      0A6h, 087h, 0E4h, 0C5h, 022h, 003h, 060h, 041h
     22036041
02E0 AE8FECCD   350            db      0AEh, 08Fh, 0ECh, 0CDh, 02Ah, 00Bh, 068h, 049h
     2A0B6849
02E8 97B6D5F4   351            db      097h, 0B6h, 0D5h, 0F4h, 013h, 032h, 051h, 070h
     13325170
02F0 9FBEDDFC   352            db      09Fh, 0BEh, 0DDh, 0FCh, 01Bh, 03Ah, 059h, 078h
     1B3A5978
02F8 88A9CAEB   353            db      088h, 0A9h, 0CAh, 0EBh, 00Ch, 02Dh, 04Eh, 06Fh
     0C2D4E6F
0300 80A1C2E3   354            db      080h, 0A1h, 0C2h, 0E3h, 004h, 025h, 046h, 067h
     04254667
0308 B998FBDA   355            db      0B9h, 098h, 0FBh, 0DAh, 03Dh, 01Ch, 07Fh, 05Eh
     3D1C7F5E
0310 B190F3D2   356            db      0B1h, 090h, 0F3h, 0D2h, 035h, 014h, 077h, 056h
     35147756
0318 EACBA889   357            db      0EAh, 0CBh, 0A8h, 089h, 06Eh, 04Fh, 02Ch, 00Dh
     6E4F2C0D
0320 E2C3A081   358            db      0E2h, 0C3h, 0A0h, 081h, 066h, 047h, 024h, 005h
     66472405
0328 DBFA99B8   359            db      0DBh, 0FAh, 099h, 0B8h, 05Fh, 07Eh, 01Dh, 03Ch
     5F7E1D3C
0330 D3F291B0   360            db      0D3h, 0F2h, 091h, 0B0h, 057h, 076h, 015h, 034h
     57761534
0338 4C6D0E2F   361            db      04Ch, 06Dh, 00Eh, 02Fh, 0C8h, 0E9h, 08Ah, 0ABh
     C8E98AAB
0340 44650627   362            db      044h, 065h, 006h, 027h, 0C0h, 0E1h, 082h, 0A3h
     C0E182A3
0348 7D5C3F1E   363            db      07Dh, 05Ch, 03Fh, 01Eh, 0F9h, 0D8h, 0BBh, 09Ah
     F9D8BB9A
0350 75543716   364            db      075h, 054h, 037h, 016h, 0F1h, 0D0h, 0B3h, 092h
     F1D0B392
0358 2E0F6C4D   365            db      02Eh, 00Fh, 06Ch, 04Dh, 0AAh, 08Bh, 0E8h, 0C9h
     AA8BE8C9
0360 26076445   366            db      026h, 007h, 064h, 045h, 0A2h, 083h, 0E0h, 0C1h
     A283E0C1
0368 1F3E5D7C   367            db      01Fh, 03Eh, 05Dh, 07Ch, 09Bh, 0BAh, 0D9h, 0F8h
     9BBAD9F8
0370 17365574   368            db      017h, 036h, 055h, 074h, 093h, 0B2h, 0D1h, 0F0h
     93B2D1F0
0378            369   
0378            370   ;---------------------------------;
0378            371   ; Main program. Includes hardware ;
0378            372   ; initialization and 'forever'    ;
0378            373   ; loop.                           ;
0378            374   ;---------------------------------;
0378            375   MainProgram:
0378 75817F     376       mov SP, #0x7f ; Setup stack pointer to the start of indirectly accessable data memory minus one
037B 120122     377       lcall Init_all ; Initialize the hardware  
037E            378       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
037E 75E600     379       mov P0M0, #0
0381 75E700     380       mov P0M1, #0
0384            381       
0384            382   forever_loop:
0384 209837     383            jb RI, serial_get
0387 20C5FA     384            jb P4.5, forever_loop ; Check if push-button pressed
038A 30C5FD     385            jnb P4.5, $ ; Wait for push-button release
038D            386            ; Play the whole memory
038D C28E       387            clr TR1 ; Stop Timer 1 ISR from playing previous request
038F D287       388            setb FLASH_CE
0391 C2A4       389            clr SPEAKER ; Turn off speaker.
0393            390            
0393 C287       391            clr FLASH_CE ; Enable SPI Flash
0395 7403       392            mov a, #READ_BYTES
0397 1200AD     393            lcall Send_SPI
039A            394            ; Set the initial position in memory where to start playing
039A 7400       395            mov a, #0x00
039C 1200AD     396            lcall Send_SPI
039F 7400       397            mov a, #0x00
03A1 1200AD     398            lcall Send_SPI
03A4 7400       399            mov a, #0x00
03A6 1200AD     400            lcall Send_SPI
03A9 7400       401            mov a, #0x00 ; Request first byte to send to DAC
03AB 1200AD     402            lcall Send_SPI
03AE            403            
03AE            404            ; How many bytes to play? All of them!  Asume 4Mbytes memory: 0x3fffff
03AE 75323F     405            mov w+2, #0x3f
03B1 7531FF     406            mov w+1, #0xff
03B4 7530FF     407            mov w+0, #0xff
03B7            408            
03B7 D2A4       409            setb SPEAKER ; Turn on speaker.
03B9 D28E       410            setb TR1 ; Start playback by enabling Timer 1
03BB 020384     411            ljmp forever_loop
03BE            412            
03BE            413   serial_get:
03BE 1200A5     414            lcall getchar ; Wait for data to arrive
03C1 B423C0     415            cjne a, #'#', forever_loop ; Message format is #n[data] where 'n' is '0' to '9'
03C4 C28E       416            clr TR1 ; Stop Timer 1 from playing previous request
03C6 D287       417            setb FLASH_CE ; Disable SPI Flash       
03C8 C2A4       418            clr SPEAKER ; Turn off speaker.
03CA 1200A5     419            lcall getchar
03CD            420   
03CD            421   ;---------------------------------------------------------       
03CD B43024     422            cjne a, #'0' , Command_0_skip
03D0            423   Command_0_start: ; Identify command
03D0 C287       424            clr FLASH_CE ; Enable SPI Flash         
03D2 749F       425            mov a, #READ_DEVICE_ID
03D4 1200AD     426            lcall Send_SPI  
03D7 7455       427            mov a, #0x55
03D9 1200AD     428            lcall Send_SPI
03DC 12009D     429            lcall putchar
03DF 7455       430            mov a, #0x55
03E1 1200AD     431            lcall Send_SPI
03E4 12009D     432            lcall putchar
03E7 7455       433            mov a, #0x55
03E9 1200AD     434            lcall Send_SPI
03EC 12009D     435            lcall putchar
03EF D287       436            setb FLASH_CE ; Disable SPI Flash
03F1 020384     437            ljmp forever_loop       
03F4            438   Command_0_skip:
03F4            439   
03F4            440   ;---------------------------------------------------------       
03F4 B43117     441            cjne a, #'1' , Command_1_skip 
03F7            442   Command_1_start: ; Erase whole flash (takes a long time)
03F7 120106     443            lcall Enable_Write
03FA C287       444            clr FLASH_CE
03FC 74C7       445            mov a, #ERASE_ALL
03FE 1200AD     446            lcall Send_SPI
0401 D287       447            setb FLASH_CE
0403 120110     448            lcall Check_WIP
0406 7401       449            mov a, #0x01 ; Send 'I am done' reply
0408 12009D     450            lcall putchar           
040B 020384     451            ljmp forever_loop       
040E            452   Command_1_skip:
040E            453   
040E            454   ;---------------------------------------------------------       
040E B43235     455            cjne a, #'2' , Command_2_skip 
0411            456   Command_2_start: ; Load flash page (256 bytes or less)
0411 120106     457            lcall Enable_Write
0414 C287       458            clr FLASH_CE
0416 7402       459            mov a, #WRITE_BYTES
0418 1200AD     460            lcall Send_SPI
041B 1200A5     461            lcall getchar ; Address bits 16 to 23
041E 1200AD     462            lcall Send_SPI
0421 1200A5     463            lcall getchar ; Address bits 8 to 15
0424 1200AD     464            lcall Send_SPI
0427 1200A5     465            lcall getchar ; Address bits 0 to 7
042A 1200AD     466            lcall Send_SPI
042D 1200A5     467            lcall getchar ; Number of bytes to write (0 means 256 bytes)
0430 F8         468            mov r0, a
0431            469   Command_2_loop:
0431 1200A5     470            lcall getchar
0434 1200AD     471            lcall Send_SPI
0437 D8F8       472            djnz r0, Command_2_loop
0439 D287       473            setb FLASH_CE
043B 120110     474            lcall Check_WIP
043E 7401       475            mov a, #0x01 ; Send 'I am done' reply
0440 12009D     476            lcall putchar           
0443 020384     477            ljmp forever_loop       
0446            478   Command_2_skip:
0446            479   
0446            480   ;---------------------------------------------------------       
0446 B4332C     481            cjne a, #'3' , Command_3_skip 
0449            482   Command_3_start: ; Read flash bytes (256 bytes or less)
0449 C287       483            clr FLASH_CE
044B 7403       484            mov a, #READ_BYTES
044D 1200AD     485            lcall Send_SPI
0450 1200A5     486            lcall getchar ; Address bits 16 to 23
0453 1200AD     487            lcall Send_SPI
0456 1200A5     488            lcall getchar ; Address bits 8 to 15
0459 1200AD     489            lcall Send_SPI
045C 1200A5     490            lcall getchar ; Address bits 0 to 7
045F 1200AD     491            lcall Send_SPI
0462 1200A5     492            lcall getchar ; Number of bytes to read and send back (0 means 256 bytes)
0465 F8         493            mov r0, a
0466            494   
0466            495   Command_3_loop:
0466 7455       496            mov a, #0x55
0468 1200AD     497            lcall Send_SPI
046B 12009D     498            lcall putchar
046E D8F6       499            djnz r0, Command_3_loop
0470 D287       500            setb FLASH_CE   
0472 020384     501            ljmp forever_loop       
0475            502   Command_3_skip:
0475            503   
0475            504   ;---------------------------------------------------------       
0475 B43437     505            cjne a, #'4' , Command_4_skip 
0478            506   Command_4_start: ; Playback a portion of the stored wav file
0478 C28E       507            clr TR1 ; Stop Timer 1 ISR from playing previous request
047A D287       508            setb FLASH_CE
047C 00         509            nop
047D C287       510            clr FLASH_CE ; Enable SPI Flash
047F 7403       511            mov a, #READ_BYTES
0481 1200AD     512            lcall Send_SPI
0484            513            ; Get the initial position in memory where to start playing
0484 1200A5     514            lcall getchar
0487 1200AD     515            lcall Send_SPI
048A 1200A5     516            lcall getchar
048D 1200AD     517            lcall Send_SPI
0490 1200A5     518            lcall getchar
0493 1200AD     519            lcall Send_SPI
0496            520            ; Get how many bytes to play
0496 1200A5     521            lcall getchar
0499 F532       522            mov w+2, a
049B 1200A5     523            lcall getchar
049E F531       524            mov w+1, a
04A0 1200A5     525            lcall getchar
04A3 F530       526            mov w+0, a
04A5            527            
04A5 7400       528            mov a, #0x00 ; Request first byte to send to DAC
04A7 1200AD     529            lcall Send_SPI
04AA            530            
04AA D28E       531            setb TR1 ; Start playback by enabling timer 1
04AC 020384     532            ljmp forever_loop       
04AF            533   Command_4_skip:
04AF            534   
04AF            535   ;---------------------------------------------------------       
04AF B4354B     536            cjne a, #'5' , Command_5_skip 
04B2            537   Command_5_start: ; Calculate and send CRC-16 of ISP flash memory from zero to the 24-bit passed value.
04B2            538            ; Get how many bytes to use to calculate the CRC.  Store in [r5,r4,r3]
04B2 1200A5     539            lcall getchar
04B5 FD         540            mov r5, a
04B6 1200A5     541            lcall getchar
04B9 FC         542            mov r4, a
04BA 1200A5     543            lcall getchar
04BD FB         544            mov r3, a
04BE            545            
04BE            546            ; Since we are using the 'djnz' instruction to check, we need to add one to each byte of the counter.
04BE            547            ; A side effect is that the down counter becomes efectively a 23-bit counter, but that is ok
04BE            548            ; because the max size of the 25Q32 SPI flash memory is 400000H.
04BE 0B         549            inc r3
04BF 0C         550            inc r4
04C0 0D         551            inc r5
04C1            552            
04C1            553            ; Initial CRC must be zero.  Using [r7,r6] to store CRC.
04C1 E4         554            clr a
04C2 FF         555            mov r7, a
04C3 FE         556            mov r6, a
04C4            557   
04C4 C287       558            clr FLASH_CE
04C6 7403       559            mov a, #READ_BYTES
04C8 1200AD     560            lcall Send_SPI
04CB E4         561            clr a ; Address bits 16 to 23
04CC 1200AD     562            lcall Send_SPI
04CF E4         563            clr a ; Address bits 8 to 15
04D0 1200AD     564            lcall Send_SPI
04D3 E4         565            clr a ; Address bits 0 to 7
04D4 1200AD     566            lcall Send_SPI
04D7 8011       567            sjmp Command_5_loop_start
04D9            568   
04D9            569   Command_5_loop:
04D9 1200AD     570            lcall Send_SPI
04DC 6F         571            xrl     a, r7                   ; XOR high of CRC with byte
04DD F8         571            mov r0, a                       ; Save for later use
04DE 900178     571            mov     dptr, #CRC16_TH ; dptr points to table high
04E1 93         571            movc a, @a+dptr                 ; Get high part from table
04E2 6E         571            xrl     a, r6                   ; XOR With low byte of CRC
04E3 FF         571            mov     r7, a                   ; Store to high byte of CRC
04E4 E8         571            mov a, r0                       ; Retrieve saved accumulator
04E5 900278     571            mov     dptr, #CRC16_TL         ; dptr points to table low      
04E8 93         571            movc a, @a+dptr                 ; Get Low from table
04E9 FE         571            mov     r6, a                   ; Store to low byte of CRC
04EA            571            ;ret ; Calculate CRC with new byte
04EA            572   Command_5_loop_start:
04EA            573            ; Drecrement counter:
04EA DBED       574            djnz r3, Command_5_loop
04EC DCEB       575            djnz r4, Command_5_loop
04EE DDE9       576            djnz r5, Command_5_loop
04F0            577            
04F0 D287       578            setb FLASH_CE ; Done reading from SPI flash
04F2            579            
04F2            580            ; Computation of CRC is complete.  Send 16-bit result using the serial port
04F2 EF         581            mov a, r7
04F3 12009D     582            lcall putchar
04F6 EE         583            mov a, r6
04F7 12009D     584            lcall putchar
04FA            585   
04FA 020384     586            ljmp forever_loop       
04FD            587   Command_5_skip:
04FD            588   
04FD            589   ;---------------------------------------------------------       
04FD B43635     590            cjne a, #'6' , Command_6_skip 
0500            591   Command_6_start: ; Fill flash page (256 bytes)
0500 120106     592            lcall Enable_Write
0503 C287       593            clr FLASH_CE
0505 7402       594            mov a, #WRITE_BYTES
0507 1200AD     595            lcall Send_SPI
050A 1200A5     596            lcall getchar ; Address bits 16 to 23
050D 1200AD     597            lcall Send_SPI
0510 1200A5     598            lcall getchar ; Address bits 8 to 15
0513 1200AD     599            lcall Send_SPI
0516 1200A5     600            lcall getchar ; Address bits 0 to 7
0519 1200AD     601            lcall Send_SPI
051C 1200A5     602            lcall getchar ; Byte to write
051F F9         603            mov r1, a
0520 7800       604            mov r0, #0 ; 256 bytes
0522            605   Command_6_loop:
0522 E9         606            mov a, r1
0523 1200AD     607            lcall Send_SPI
0526 D8FA       608            djnz r0, Command_6_loop
0528 D287       609            setb FLASH_CE
052A 120110     610            lcall Check_WIP
052D 7401       611            mov a, #0x01 ; Send 'I am done' reply
052F 12009D     612            lcall putchar           
0532 020384     613            ljmp forever_loop       
0535            614   Command_6_skip:
0535            615   
0535 020384     616            ljmp forever_loop
0538            617   
0538            618   END
